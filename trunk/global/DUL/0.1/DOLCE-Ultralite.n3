@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix : <http://purl.org/ifgi/dul#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix DUL: <http://www.loa-cnr.it/ontologies/DUL.owl#> .

_:node16tsjbk2dx52 a owl:Ontology ;
	rdfs:label "DOLCE_Ultralite" ;
	dc:format "http://www.wsmo.org/wsml/wsml-syntax/wsml-flight" ;
	dc:publisher "IfGI, University of Muenster"^^xsd:string ;
	dc:type "Foundational Ontology"^^xsd:string ;
	dc:title "DOLCE+DnS Ultralite"^^xsd:string ;
	dc:description "Created by Aldo Gangemi as both a simplification and extension of DOLCE and Descriptions and Situations ontologies. WSML Translation by Marcell Roth"^^xsd:string ;
	dc:source "http://www.loa-cnr.it/ontologies/DUL.owl"^^xsd:string ;
	dc:subject "dolce, foundational"^^xsd:string .

:Abstract a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Abstract" ;
	rdfs:subClassOf :Entity ;
	dc:identifier "Abstract@en"^^xsd:string , "Astratto@it"^^xsd:string ;
	dc:description "Any Entity that cannot be located in space-time. E.g. mathematical entities: formal semantics elements, regions within dimensional spaces, etc."^^xsd:string .

:Action a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Action" ;
	rdfs:subClassOf :Event ;
	dc:identifier "Action@en"^^xsd:string , "Azione@it"^^xsd:string ;
	dc:description "An Event with at least one Agent that isParticipantIn it, and that executes a Task that typically isDefinedIn a Plan, Workflow, Project, etc."^^xsd:string .

:Agent a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Agent" ;
	rdfs:subClassOf :Object ;
	dc:identifier "Agent@en"^^xsd:string , "Agente@it"^^xsd:string ;
	dc:description "Any agentive Object , either physical (e.g. a whale, a robot, an oak), or social (e.g. a corporation, an institution, a community). Additional comment: a computational agent can be considered as a PhysicalAgent that realizes a certain class of algorithms (that can be considered as instances of InformationObject) that allow to obtain some behaviors that are considered typical of agents in general. For an ontology of computational objects based on DOLCE see e.g. http://www.loa-cnr.it/COS/COS.owl, and http://www.loa-cnr.it/KCO/KCO.owl."^^xsd:string .

:Amount a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Amount" ;
	rdfs:subClassOf :Region ;
	dc:identifier "Amount@en"^^xsd:string , "Quantit@it"^^xsd:string ;
	dc:description "A quantity, independently from how it is measured, computed, etc."^^xsd:string .

:BiologicalObject a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#BiologicalObject" ;
	rdfs:subClassOf :PhysicalBody ;
	dc:identifier "Biological object@en"^^xsd:string .

:ChemicalObject a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#ChemicalObject" ;
	rdfs:subClassOf :PhysicalBody ;
	dc:identifier "Chemical object@en"^^xsd:string .

:Classification a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Classification" ;
	rdfs:subClassOf :Situation ;
	dc:identifier "Classification@en"^^xsd:string , "Classificazione@it"^^xsd:string ;
	dc:description "A special kind of Situation that allows to include time indexing for the classifies relation in situations. For example, if a Situation s 'my old cradle is used in these days as a flower pot' isSettingFor the entity 'my old cradle' and the TimeIntervals '8June2007' and '10June2007', and we know that s satisfies a functional Description for aesthetic objects, which defines the Concepts 'flower pot' and 'flower', then we also need to know what concept classifies 'my old cradle' at what time. In order to solve this issue, we need to create a sub-situation s' for the classification time: 'my old cradle is a flower pot in 8June2007'. Such sub-situation s' isPartOf s."^^xsd:string .

:Collection a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Collection" ;
	rdfs:subClassOf :SocialObject ;
	dc:identifier "Collection@en"^^xsd:string , "Collezione@it"^^xsd:string ;
	dc:description "Any container for entities that share one or more common properties. E.g. \"stone objects\", \"the nurses\", \"the Louvre Aegyptian collection\", all the elections for the Italian President of the Republic. A collection is not a logical class: a collection is a first-order entity, while a class is second-order."^^xsd:string .

:Collective a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Collective" ;
	rdfs:subClassOf :Collection ;
	dc:identifier "Collective@en"^^xsd:string , "Collettivo@it"^^xsd:string ;
	dc:description "A Collection whose members are agents, e.g. \"the nurses\", \"the Italian rockabilly fans\". Collectives, facon de parler, can act as agents, although they are not assumed here to be agents (they are even disjoint from the class SocialAgent). This is represented by admitting collectives in the range of the relations having Agent in their domain or range."^^xsd:string .

:CollectiveAgent a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#CollectiveAgent" ;
	rdfs:subClassOf :SocialAgent ;
	dc:identifier "Collective agent@en"^^xsd:string , "Agente collettivo@it"^^xsd:string ;
	dc:description "A SocialAgent that is actedBy agents that are (and act as) members of a Collective. A collective agent can have roles that are also roles of those agents. For example, in sociology, a 'group action' is the situation in which a number of people (that result to be members of a collective) in a given area behave in a coordinated way in order to achieve a (often common) goal. The Agent in such a Situation is not single, but a CollectiveAgent (a Group). This can be generalized to the notion of social movement, which assumes a large Community or even the entire Society as agents. The difference between a CollectiveAgent and an Organization is that a Description that introduces a CollectiveAgent is also one that unifies the corresponding Collective. In practice, this difference makes collective agents 'less stable' than organizations, because they have a dedicated, publicly recognizable Description that is conceived to introduce them."^^xsd:string .

:Community a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Community" ;
	rdfs:subClassOf :CollectiveAgent ;
	dc:identifier "Community@en"^^xsd:string , "Comunit?@it"^^xsd:string .

:Concept a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Concept" ;
	rdfs:subClassOf :SocialObject ;
	dc:identifier "Concept@en"^^xsd:string , "Concetto@it"^^xsd:string ;
	dc:description "A Concept is a SocialObject, and isDefinedIn some Description; once defined, a Concept can be used in other Description(s). If a Concept isDefinedIn exactly one Description, see the LocalConcept class. The classifies relation relates Concept(s) to Entity(s) at some TimeInterval"^^xsd:string .

:Configuration a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Configuration" ;
	rdfs:subClassOf :Collection ;
	dc:identifier "Configuration@en"^^xsd:string , "Configurazione@it"^^xsd:string ;
	dc:description "A collection whose members are 'unified', i.e. organized according to a certain schema that can be represented by a Description. Typically, a configuration is the collection that emerges out of a composed entity: an industrial artifact, a plan, a discourse, etc. E.g. a physical book has a configuration provided by the part-whole schema that holds together its cover, pages, ink. That schema, based on the individual relations between the book and its parts, can be represented in a reified way by means of a (structural) description, which is said to 'unify' the book configuration."^^xsd:string .

:Contract a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Contract" ;
	rdfs:subClassOf :Description ;
	dc:identifier "Contract@en"^^xsd:string , "Contratto@it"^^xsd:string ;
	dc:description "(The content of) an agreement between at least two agents that play a Party Role, about some contract object (a Task to be executed)."^^xsd:string .

:Description a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Description" ;
	rdfs:subClassOf :SocialObject ;
	dc:identifier "Description@en"^^xsd:string , "Descrizione@it"^^xsd:string ;
	dc:description "A Description is a SocialObject that represents a conceptualization. It can be thought also as a 'descriptive context' that uses or defines concepts in order to create a view on a 'relational context' (cf. Situation) out of a set of data or observations. For example, a Plan is a Description of some actions to be executed by agents in a certain way, with certain parameters; a Diagnosis is a Description that provides an interpretation for a set of observed entities, etc."^^xsd:string .

:Design a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Design" ;
	rdfs:subClassOf :Description ;
	dc:identifier "Design@en"^^xsd:string , "Design@it"^^xsd:string ;
	dc:description "A Description of the Situation, in terms of structure and function, held by an Entity for some reason. A design is usually accompanied by the rationales behind the construction of the designed Entity (i.e. of the reasons why a design is claimed to be as such). For example, the actual design (a Situation) of a car or of a law is based on both the specification (a Description) of the structure and the rationales used to construct cars or a specific law. While designs typically describe entities to be constructed, they can also be used to describe 'refunctionalized' entities, or to hypothesize unknown functions."^^xsd:string .

:DesignedArtifact a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#DesignedArtifact" ;
	rdfs:subClassOf :PhysicalArtifact ;
	dc:identifier "Designed artifact@en"^^xsd:string , "Artefatto progettato@it"^^xsd:string ;
	dc:description "A PhysicalArtifact that is also described by a Design. This excludes simple recycling or refunctionalization of natural objects. Most common sense 'artifacts' can be included in this class: cars, lamps, houses, chips, etc."^^xsd:string .

:DesignedSubstance a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#DesignedSubstance" ;
	rdfs:subClassOf :DesignedArtifact , :FunctionalSubstance ;
	dc:identifier "DesignedSubstance@en"^^xsd:string .

:Diagnosis a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Diagnosis" ;
	rdfs:subClassOf :Description ;
	dc:identifier "Diagnosis@en"^^xsd:string , "Diagnosi@it"^^xsd:string ;
	dc:description "A Description of the Situation of a system, usually applied in order to control a normal behaviour, or to explain a notable behavior (e.g. a functional breakdown)."^^xsd:string .

:Entity a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Entity" ;
	dc:identifier "Entity@en"^^xsd:string , "Entit?@it"^^xsd:string ;
	dc:description "Anything: real, possible, or imaginary, which some modeller wants to talk about for some purpose."^^xsd:string .

:Event a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Event" ;
	rdfs:subClassOf :Entity ;
	dc:identifier "Event@en"^^xsd:string , "Evento@it"^^xsd:string ;
	dc:description "Any physical, social, or mental process, event, or state."^^xsd:string .

:EventType a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#EventType" ;
	rdfs:subClassOf :Concept ;
	dc:identifier "Event type@en"^^xsd:string , "Tipo di evento@it"^^xsd:string ;
	dc:description "A Concept that classifies an Event . An event type describes how an Event should be interpreted, executed, expected, seen, etc., according to the Description that the EventType isDefinedIn (or used in)"^^xsd:string .

:FormalEntity a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#FormalEntity" ;
	rdfs:subClassOf :Abstract ;
	dc:identifier "Formal entity@en"^^xsd:string , "Entit? formale astratta@it"^^xsd:string ;
	dc:description "Entities that are formally defined and are considered independent from the social context in which they are used. They cannot be localized in space or time. Also called 'Platonic entities'. Mathematical and logical entities are included in this class: sets, categories, tuples, costants, variables, etc. Abstract formal entities are distinguished from information objects, which are supposed to be part of a social context, and are localized in space and time, therefore being (social) objects. For example, the class 'Quark' is an abstract formal entity from the purely set-theoretical perspective, but it is an InformationObject from the viewpoint of ontology design, when e.g. implemented in a logical language like OWL. Abstract formal entities are also distinguished from Concept(s), Collection(s), and Description(s), which are part of a social context, therefore being SocialObject(s) as well. For example, the class 'Quark' is an abstract FormalEntity from the purely set-theoretical perspective, but it is a Concept within history of science and cultural dynamics. These distinctions allow to represent two different notions of 'semantics': the first one is abstract and formal ('formal semantics'), and formallyInterprets symbols that are about entities whatsoever; for example, the term 'Quark' isAbout the Collection of all quarks, and that Collection isFormalGroundingFor the abstract class 'Quark' (in the extensional sense). The second notion is social, localized in space-time ('social semantics'), and can be used to interpret entities in the intensional sense. For example, the Collection of all quarks isCoveredBy the Concept 'Quark', which is also expressed by the term 'Quark'."^^xsd:string .

:FunctionalSubstance a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#FunctionalSubstance" ;
	rdfs:subClassOf :Substance ;
	dc:identifier "Functional substance@en"^^xsd:string .

:Goal a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Goal" ;
	rdfs:subClassOf :Description ;
	dc:identifier "Goal@en"^^xsd:string , "Scopo@it"^^xsd:string ;
	dc:description "The Description of a Situation that is desired by an Agent, and usually associated to a Plan that describes how to actually achieve it"^^xsd:string .

:Group a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Group" ;
	rdfs:subClassOf :CollectiveAgent ;
	dc:identifier "Group@en"^^xsd:string , "Gruppo@it"^^xsd:string ;
	dc:description "A CollectiveAgent whose acting agents conceptualize a same SocialRelation."^^xsd:string .

:InformationEntity a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#InformationEntity" ;
	rdfs:subClassOf :Entity ;
	dc:identifier "Information entity@en"^^xsd:string ;
	dc:description "A piece of information, be it concretely realized or not."^^xsd:string .

:InformationObject a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#InformationObject" ;
	rdfs:subClassOf :InformationEntity , :SocialObject ;
	dc:identifier "Information object@en"^^xsd:string , "Oggetto informativo@it"^^xsd:string ;
	dc:description "A piece of information, such as a musical composition, a text, a word, a picture, independently from how it is concretely realized."^^xsd:string .

:InformationRealization a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#InformationRealization" ;
	rdfs:subClassOf :InformationEntity ;
	dc:identifier "Information realization@en"^^xsd:string , "Informazione concreta@it"^^xsd:string ;
	dc:description "A concrete realization of an InformationObject, e.g. the written document containing the text of a law."^^xsd:string .

:LocalConcept a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#LocalConcept" ;
	rdfs:subClassOf :Concept ;
	dc:identifier "Local concept@en"^^xsd:string ;
	dc:description "A Concept that isDefinedIn exactly 1 Description. For example, the Concept 'coffee' in a 'preparesCoffee' relation can be defined in that relation, and for all other Description(s) that use it, the isConceptUsedIn property should be applied. Notice therefore that not necessarily all Concept(s) isDefinedIn exactly 1 Description."^^xsd:string .

:Method a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Method" ;
	rdfs:subClassOf :Description ;
	dc:identifier "Method@en"^^xsd:string , "Metodo@it"^^xsd:string ;
	dc:description "A method is a Description that defines or uses concepts in order to guide carrying out actions aimed at a solution with respect to a problem. It is different from a Plan, because plans could be carried out in order to follow a method, but a method can be followed by executing alternative plans."^^xsd:string .

:Narrative a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Narrative" ;
	rdfs:subClassOf :Description ;
	dc:identifier "Narrative@en"^^xsd:string .

:NaturalPerson a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#NaturalPerson" ;
	rdfs:subClassOf :Person , :PhysicalAgent ;
	dc:identifier "Natural person@en"^^xsd:string , "Persona fisica@it"^^xsd:string ;
	dc:description "A person in the physical commonsense intuition: 'have you seen that person walking down the street?'"^^xsd:string .

:Norm a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Norm" ;
	rdfs:subClassOf :Description ;
	dc:identifier "Norm@en"^^xsd:string , "Norma@it"^^xsd:string ;
	dc:description "A social norm."^^xsd:string .

:Object a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Object" ;
	rdfs:subClassOf :Entity ;
	dc:identifier "Object@en"^^xsd:string , "Oggetto@it"^^xsd:string ;
	dc:description "Any physical, social, or mental object, or a substance"^^xsd:string .

:Organism a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Organism" ;
	rdfs:subClassOf :BiologicalObject ;
	dc:identifier "Organism@en"^^xsd:string , "Organismo@it"^^xsd:string ;
	dc:description "A physical objects with biological characteristics, typically that organisms can self-reproduce."^^xsd:string .

:Organization a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Organization" ;
	rdfs:subClassOf :SocialAgent ;
	dc:identifier "Organization@en"^^xsd:string , "Organizzazione@it"^^xsd:string ;
	dc:description "An internally structured, conventionally created SocialAgent, needing a specific Role and Agent that plays it, in order to act."^^xsd:string .

:Parameter a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Parameter" ;
	rdfs:subClassOf :Concept ;
	dc:identifier "Parameter@en"^^xsd:string , "Parametro@it"^^xsd:string ;
	dc:description "A Concept that classifies a Region; the difference between a Region and a Parameter is that regions represent sets of observable values, e.g. the height of a given building, while parameters represent constraints or selections on observable values, e.g. 'VeryHigh'. Therefore, parameters can also be used to constrain regions, e.g. VeryHigh on a subset of values of the Region Height applied to buildings, or to add an external selection criterion , such as measurement units, to regions, e.g. Meter on a subset of values from the Region Length applied to the Region Length applied to roads."^^xsd:string .

:Pattern a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Pattern" ;
	rdfs:subClassOf :Relation ;
	dc:identifier "Pattern@en"^^xsd:string ;
	dc:description "Any invariance detected from a dataset, or from observation; also, any invariance proposed based on top-down considerations. E.g. patterns detected and abstracted by an organism, by pattern recognition algorithms, by machine learning techniques, etc. An occurrence of a pattern is an 'observable', or detected Situation"^^xsd:string .

:Person a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Person" ;
	rdfs:subClassOf :Agent ;
	dc:identifier "Person@en"^^xsd:string , "Persona@it"^^xsd:string ;
	dc:description "Persons in commonsense intuition, which does not apparently distinguish between either natural or social persons."^^xsd:string .

:Personification a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Personification" ;
	rdfs:subClassOf :SocialAgent ;
	dc:identifier "Personification@en"^^xsd:string ;
	dc:description "A social entity with agentive features, but whose status is the result of a cultural transformation from e.g. a PhysicalObject, an Event, an Abstract, another SocialObject, etc. For example: the holy grail, deus ex machina, gods, magic wands, etc."^^xsd:string .

:PhysicalAgent a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#PhysicalAgent" ;
	rdfs:subClassOf :Agent , :PhysicalObject ;
	dc:identifier "Physical agent@en"^^xsd:string , "Agente fisico@it"^^xsd:string ;
	dc:description "A PhysicalObject that is capable of self-representing (conceptualizing) a Description in order to plan an Action. A PhysicalAgent is a substrate for (actsFor) a Social Agent"^^xsd:string .

:PhysicalArtifact a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#PhysicalArtifact" ;
	rdfs:subClassOf :PhysicalObject ;
	dc:identifier "Physical artifact@en"^^xsd:string , "Artefatto fisico@it"^^xsd:string ;
	dc:description "Any PhysicalObject that isDescribedBy a Plan . This axiomatization is weak, but allows to talk of artifacts in a very general sense, i.e. including recycled objects, objects with an intentional functional change, natural objects that are given a certain function, even though they are not modified or structurally designed, etc. PhysicalArtifact(s) are not considered disjoint from PhysicalBody(s), in order to allow a dual classification when needed. E.g., FunctionalSubstance(s) are included here as well. Immaterial (non-physical) artifacts (e.g. texts, ideas, cultural movements, corporations, communities, etc. can be modelled as social objects (see SocialObject), which are all 'artifactual' in the weak sense assumed here."^^xsd:string .

:PhysicalAttribute a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#PhysicalAttribute" ;
	rdfs:subClassOf :Region ;
	dc:identifier "Physical attribute@en"^^xsd:string , "Caratteristica fisica@it"^^xsd:string ;
	dc:description "Physical value of a physical object, e.g. density, color, etc."^^xsd:string .

:PhysicalBody a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#PhysicalBody" ;
	rdfs:subClassOf :PhysicalObject ;
	dc:identifier "Physical body@en"^^xsd:string ;
	dc:description "Physical bodies are PhysicalObject(s), for which we tend to neutralize any possible artifactual character. They can have several granularity levels: geological, chemical, physical, biological, etc."^^xsd:string .

:PhysicalObject a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#PhysicalObject" ;
	rdfs:subClassOf :Object ;
	dc:identifier "Physical object@en"^^xsd:string , "Oggetto fisico@it"^^xsd:string ;
	dc:description "Any Object that has a proper space region. The prototypical physical object has also an associated mass, but the nature of its mass can greatly vary based on the epistemological status of the object (scientifically measured, subjectively possible, imaginary)."^^xsd:string .

:PhysicalPlace a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#PhysicalPlace" ;
	rdfs:subClassOf :PhysicalObject ;
	dc:identifier "Physical place@en"^^xsd:string , "Luogo fisico@it"^^xsd:string ;
	dc:description "A physical object that is inherently located; for example, a water area."^^xsd:string .

:Place a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Place" ;
	rdfs:subClassOf :SocialObject ;
	dc:identifier "Place@en"^^xsd:string , "Luogo@it"^^xsd:string ;
	dc:description "A location, in a very generic sense: a political geographic entity (Roma, Lesotho), a non-material location determined by the presence of other entities (\"the area close to Roma\"), pivot events or signs (\"the area where the helicopter fell\"), complements of other entities (\"the area under the table\"), etc. In this generic sense, a Place is an \"approximate\" location. For an \"absolute\" location, see the class SpaceRegion"^^xsd:string .

:Plan a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Plan" ;
	rdfs:subClassOf :Description ;
	dc:identifier "Plan@en"^^xsd:string , "Piano@it"^^xsd:string ;
	dc:description "A Description having an explicit Goal, to be achieved by executing the plan"^^xsd:string .

:PlanExecution a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#PlanExecution" ;
	rdfs:subClassOf :Situation ;
	dc:identifier "Plan execution@en"^^xsd:string , "Esecuzione di piano@it"^^xsd:string ;
	dc:description "Plan executions are situations that proactively satisfy a plan. Subplan executions are proper parts of the whole plan execution."^^xsd:string .

:Process a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Process" ;
	rdfs:subClassOf :Event ;
	dc:identifier "Process@en"^^xsd:string , "Processo@it"^^xsd:string ;
	dc:description "This is a placeholder for events that are considered in their evolution, or anyway not strictly dependent on agents, tasks, and plans. See Event class for some thoughts on classifying events. See also 'Transition'."^^xsd:string .

:Project a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Project" ;
	rdfs:subClassOf :Plan ;
	dc:identifier "Project@en"^^xsd:string , "Progetto@it"^^xsd:string ;
	dc:description "A Plan that defines Role(s), Task(s), and a specific structure for tasks to be executed in relation to goals to be achieved, in order to achieve the main goal of the project. In other words, a project is a plan with a subgoal structure and multiple roles and tasks."^^xsd:string .

:Quality a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Quality" ;
	rdfs:subClassOf :Entity ;
	dc:identifier "Quality@en"^^xsd:string , "Qualit?@it"^^xsd:string ;
	dc:description "Any aspect of an Entity (but not a part of it), which cannot exist without that Entity. For example, the way the surface of a specific PhysicalObject looks like is a Quality, while the encoding of that Quality into e.g. a PhysicalAttribute should be modeled as a Region. From the design viewpoint, the Quality-Region distinction is useful only when individual aspects of an Entity are considered in a domain of discourse. For example, in an automotive context, it would be irrelevant to consider the aspects of car windows for a specific car, unless the factory wants to check a specific window against design parameters (anomaly detection). On the other hand, in an antiques context, the individual aspects for a specific piece of furniture are a major focus of attention, and may constitute the actual added value, because the design parameters for old furniture are often not fixed, and may not be viewed as 'anomalies'."^^xsd:string .

:Region a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Region" ;
	rdfs:subClassOf :Abstract ;
	dc:identifier "Region@en"^^xsd:string , "Regione@it"^^xsd:string ;
	dc:description "Any region in a dimensional space (a dimensional space is a maximal Region), which can be used as a value for a quality of an Entity . For example, TimeInterval, SpaceRegion, PhysicalAttribute, Amount, SocialAttribute are all subclasses of Region. Regions are not data values in the ordinary knowledge representation sense; in order to get patterns for modelling data, see the properties: representsDataValue and hasDataValue"^^xsd:string .

:Relation a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Relation" ;
	rdfs:subClassOf :Description ;
	dc:identifier "Relation@en"^^xsd:string , "Relazione@it"^^xsd:string ;
	dc:description "Relations are descriptions that can be considered as the counterpart of formal relations (that are included in the FormalEntity class). For example, 'givingGrantToInstitution(x,y,z)' with three argument types: Provider(x),Grant(y),Recipient(z), can have a Relation counterpart: 'GivingGrantToInstitution', which defines three Concept instances: Provider,Grant,Recipient. Since social objects are not formal entities, Relation includes here any 'relation-like' entity in common sense, including social relations."^^xsd:string .

:Right a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Right" ;
	rdfs:subClassOf :Description ;
	dc:identifier "Right@en"^^xsd:string , "Diritto@it"^^xsd:string ;
	dc:description "A legal position by which an Agent is entitled to obtain something from another Agent , under specified circumstances, through an enforcement explicited either in a Law, Contract , etc."^^xsd:string .

:Role a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Role" ;
	rdfs:subClassOf :Concept ;
	dc:identifier "Role@en"^^xsd:string , "Ruolo@it"^^xsd:string ;
	dc:description "A Concept that classifies an Object"^^xsd:string .

:Set a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Set" ;
	rdfs:subClassOf :FormalEntity ;
	dc:identifier "Set@en"^^xsd:string , "Insieme@it"^^xsd:string .

:Situation a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Situation" ;
	rdfs:subClassOf :SocialObject ;
	dc:identifier "Situation@en"^^xsd:string , "Situazione@it"^^xsd:string ;
	dc:description "A view, consistent with ('satisfying') a Description, on a set of entities. It can also be seen as a 'relational context' created by an observer on the basis of a 'frame' (i.e. a Description). For example, a PlanExecution is a context including some actions executed by agents according to certain parameters and expected tasks to be achieved from a Plan; a DiagnosedSituation is a context of observed entities that is interpreted on the basis of a Diagnosis, etc. Situation is also able to represent reified n-ary relations, where isSettingFor is the top-level relation for all binary projections of the n-ary relation. If used in a transformation pattern for n-ary relations, the designer should take care of creating only one subclass of Situation for each n-ary relation, otherwise the 'identification constraint' (Calvanese et al., IJCAI 2001) could be violated."^^xsd:string .

:SocialAgent a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#SocialAgent" ;
	rdfs:subClassOf :Agent , :SocialObject ;
	dc:identifier "Social agent@en"^^xsd:string , "Agente sociale@it"^^xsd:string ;
	dc:description "Any individual whose existence is granted simply by its social communicability and capability of action (through some PhysicalAgent)."^^xsd:string .

:SocialObject a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#SocialObject" ;
	rdfs:subClassOf :Object ;
	dc:identifier "Social object@en"^^xsd:string , "Oggetto sociale@it"^^xsd:string ;
	dc:description "Any Object that exists only within some communication Event, in which at least one PhysicalObject participates in. In other words, all objects that have been or are created in the process of social communication: for the sake of communication (InformationObject), for incorporating new individuals (SocialAgent, Place), for contextualizing existing entities (Situation), for collecting existing entities (Collection), or for describing existing entities (Description, Concept). Being dependent on communication, all social objects need to be expressed by some information object (information object are self-expressing)."^^xsd:string .

:SocialAttribute a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#SocialAttribute" ;
	rdfs:subClassOf :Region ;
	dc:identifier "Social attribute@en"^^xsd:string , "Caratteristica sociale@it"^^xsd:string ;
	dc:description "Any Region in a dimensional space that is used to represent some characteristic of a SocialObject, e.g. judgment values, social scalars, statistical attributes over a collection of entities, etc."^^xsd:string .

:SocialPerson a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#SocialPerson" ;
	rdfs:subClassOf :Person , :SocialAgent ;
	dc:identifier "Social person@en"^^xsd:string , "Persona sociale@it"^^xsd:string ;
	dc:description "A SocialAgent that needs the existence of a specific NaturalPerson in order to act (but the lifetime of the NaturalPerson has only to overlap that of the SocialPerson)."^^xsd:string .

:SocialRelation a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#SocialRelation" ;
	rdfs:subClassOf :Relation ;
	dc:identifier "Social relation@en"^^xsd:string , "Relazione sociale@it"^^xsd:string ;
	dc:description "Any social relationship"^^xsd:string .

:SpaceRegion a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#SpaceRegion" ;
	rdfs:subClassOf :Region ;
	dc:identifier "Space region@en"^^xsd:string , "Regione di spazio@it"^^xsd:string ;
	dc:description "Any Region in a dimensional space that is used to localize an Entity ; i.e., it is not used to represent some characteristic (e.g. it excludes time intervals, colors, size values, judgment values, etc.). Differently from a Place , a space region has a specific dimensional space."^^xsd:string .

:SpatioTemporalRegion a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#SpatioTemporalRegion" ;
	rdfs:subClassOf :Region ;
	dc:identifier "Spatio temporal region@en"^^xsd:string .

:Substance a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Substance" ;
	rdfs:subClassOf :PhysicalBody ;
	dc:identifier "Substance@en"^^xsd:string , "Sostanza@it"^^xsd:string ;
	dc:description "Any PhysicalBody that has not necessarily specified (designed) boundaries, e.g. a pile of trash, some sand, etc. In this sense, an artistic object made of trash or a dose of medicine in the form of a pill would be a FunctionalSubstance, and a DesignedArtifact, since its boundaries are specified by a Design; aleatoric objects that are outcomes of an artistic process might be still considered DesignedArtifact(s), and Substance(s)."^^xsd:string .

:Task a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Task" ;
	rdfs:subClassOf :EventType ;
	dc:identifier "Task@en"^^xsd:string , "Task@it"^^xsd:string ;
	dc:description "An EventStructure that classifies an Action to be executed"^^xsd:string .

:Theory a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Theory" ;
	rdfs:subClassOf :Description ;
	dc:identifier "Theory@en"^^xsd:string , "Teoria@it"^^xsd:string ;
	dc:description "A Theory is a Description that represents a set of assumptions for describing something, usually general. Scientific, philosophical, and commonsense theories can be included here. This class can also be used to act as 'naturalized reifications' of logical theories (of course, they will be necessarily incomplete in this case, because second-order entities are represented as first-order ones)."^^xsd:string .

:TimeInterval a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#TimeInterval" ;
	rdfs:subClassOf :Region ;
	dc:identifier "Time interval@en"^^xsd:string , "Intervallo di tempo@it"^^xsd:string ;
	dc:description "Any Region in a dimensional space that aims at representing time."^^xsd:string .

:Transition a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Transition" ;
	rdfs:subClassOf :Situation ;
	dc:identifier "Transition@en"^^xsd:string , "Transizione@it"^^xsd:string ;
	dc:description "A transition is a Situation that creates a context for three TimeInterval(s), two additional different Situation(s), one Event, one Process, and at least one Object: the Event is observed as the cause for the transition, one Situation is the state before the transition, the second Situation is the state after the transition, the Process is the invariance under some different transitions (including the one represented here), in which at least one Object is situated. Finally, the time intervals position the situations and the transitional event in time. This class of situations partly encodes the ontology underlying typical engineering algebras for processes, e.g. Petri Nets. A full representation of the transition ontology is outside the expressivity of OWL, because we would need qualified cardinality restrictions, coreference, property equivalence, and property composition."^^xsd:string .

:TypeCollection a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#TypeCollection" ;
	rdfs:subClassOf :Collection ;
	dc:identifier "Type collection@en"^^xsd:string , "Collezione di un tipo@it"^^xsd:string ;
	dc:description "A Collection whose members are the maximal set of individuals that share the same (named) type, e.g. \"the gem stones\", \"the Italians\". This class is very useful to apply a variety of the so-called \"ClassesAsValues\" design pattern, when it is used to talk about the extensional aspect of a class. An alternative variety of the pattern applies to the intensional aspect of a class, and the class Concept should be used instead."^^xsd:string .

:UnitOfMeasure a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#UnitOfMeasure" ;
	rdfs:subClassOf :Parameter ;
	dc:identifier "Unit of measure@en"^^xsd:string , "Unit? di misura@it"^^xsd:string ;
	dc:description "Units of measure are conceptualized here as parameters on regions, which can be valued as datatype values."^^xsd:string .

:Workflow a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#Workflow" ;
	rdfs:subClassOf :Plan ;
	dc:identifier "Workflow@en"^^xsd:string , "Workflow@it"^^xsd:string ;
	dc:description "A Plan that defines Role(s), Task(s), and a specific structure for tasks to be executed, usually supporting the work of an Organization"^^xsd:string .

:WorkflowExecution a rdfs:Class ;
	rdfs:label "http://purl.org/ifgi/dul#WorkflowExecution" ;
	rdfs:subClassOf :PlanExecution ;
	dc:identifier "Workflow execution@en"^^xsd:string , "Esecuzione di workflow@it"^^xsd:string .

:actsFor a rdf:Property ;
	rdfs:domain :Agent ;
	rdfs:range :SocialAgent ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "acts for@en"^^xsd:string , "agisce per@it"^^xsd:string ;
	dc:description "The relation holding between any Agent, and a SocialAgent. In principle, a SocialAgent requires at least one PhysicalAgent in order to act, but this dependency can be 'delegated'; e.g. a university can be acted for by a department, which on its turm is acted for by physical agents."^^xsd:string .

:actsThrough a rdf:Property ;
	rdfs:domain :Agent ;
	rdfs:range :SocialAgent ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "acts for@en"^^xsd:string , "agisce per@it"^^xsd:string ;
	dc:description "The relation holding between a PhysicalAgent and a SocialAgent. In principle, a SocialAgent requires at least one PhysicalAgent in order to act, but this dependency can be 'delegated';, e.g. a university can be acted for by a department, which is acted for by physical agents. AKA isActedBy"^^xsd:string .

:associatedWith a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	dc:identifier "associated with@en"^^xsd:string ;
	dc:description "A catch-all object property, useful for alignment and querying purposes."^^xsd:string .

:characterizes a rdf:Property ;
	rdfs:domain :Concept ;
	rdfs:range :Collection ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "characterizes@en"^^xsd:string , "caratterizza@it"^^xsd:string ;
	dc:description "TA relation between concepts and collections, where a Concept is said to characterize a Collection; it corresponds to a link between the (reified) intensional and extensional interpretations of a _proper subset of_ a (reified) class. This is different from covers, because it refers to an interpretation the entire reified class. E.g. the collection of vintage saxophones is characterized by the Concept 'manufactured by hand', while it gets covered by the Concept 'Saxophone' with the Parameter 'Vintage'."^^xsd:string .

:classifies a rdf:Property ;
	rdfs:domain :Concept ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "classifies@en"^^xsd:string , "classifica@it"^^xsd:string ;
	dc:description "A relation between a Concept and an Entity, e.g. the Role 'student' classifies a Person 'John'."^^xsd:string .

:co-participatesWith a rdf:Property ;
	rdfs:domain :Object ;
	rdfs:range :Object ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "co-participates with@en"^^xsd:string , "copartecipa con@it"^^xsd:string ;
	dc:description "A relation between two objects participating in a same Event; e.g., 'Vitas and Jimmy are playing tennis'."^^xsd:string .

:conceptualizes a rdf:Property ;
	rdfs:domain :Agent ;
	rdfs:range :SocialObject ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "conceptualizes@en"^^xsd:string , "concettualizza@it"^^xsd:string ;
	dc:description "A relation stating that an Agent is internally representing a SocialObject: situations, descriptions, concepts, etc. E.g., 'John believes in the conspiracy theory'; 'Niels Bohr created the solar-system metaphor for the atomic theory'; 'Jacques assumes all swans are white'; 'the task force members share the attack plan'. Conceptualizations can be distinguished into different forms, primarily based on the type of SocialObject that is conceptualized. Descriptions and concepts can be 'assumed', situations can be 'believed' or 'known', plans can be 'adopted', etc. (see ontology: http://www.ontologydesignpatterns.org/ont/dul/Conceptualization.owl.)."^^xsd:string .

:concretelyExpresses a rdf:Property ;
	rdfs:domain :InformationRealization ;
	rdfs:range :SocialObject ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "concretely expresses@en"^^xsd:string , "esprime concretamente@it"^^xsd:string ;
	dc:description "A relation between an InformationRealization and a Description, e.g. 'the printout of the Italian Constitution concretelyExpresses the Italian Constitution'. It should be supplied also with a rule stating that the InformationRealization realizes an InformationObject that expresses the Description."^^xsd:string .

:covers a rdf:Property ;
	rdfs:domain :Concept ;
	rdfs:range :Collection ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "covers@en"^^xsd:string , "ricopre@it"^^xsd:string ;
	dc:description "A relation between concepts and collections, where a Concept is said to cover a Collection; it corresponds to a link between the (reified) intensional and extensional interpretations of a (reified) class. E.g. the collection of vintage saxophones is covered by the Concept 'Saxophone' with the Parameter 'Vintage'."^^xsd:string .

:describes a rdf:Property ;
	rdfs:domain :Description ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "describes@en"^^xsd:string , "descrive@it"^^xsd:string ;
	dc:description "The relation between a Description and an Entity : a Description gives a unity to a Collection of parts (the components), or constituents, by assigning a Role to each of them in the context of a whole Object (the system). A same Entity can be given different descriptions, for example, an old cradle can be given a unifying Description based on the original aesthetic design, the functionality it was built for, or a new aesthetic functionality in which it can be used as a flower pot."^^xsd:string .

:expresses a rdf:Property ;
	rdfs:domain :InformationObject ;
	rdfs:range :SocialObject ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "expresses@en"^^xsd:string , "esprime@it"^^xsd:string ;
	dc:description "A relation between an InformationObject and a 'meaning', generalized here as a 'SocialObject'. For example: 'A Beehive is a structure in which bees are kept, typically in the form of a dome or box.' (Oxford dictionary)'; 'the term Beehive expresses the concept Beehive in my apiculture ontology'. The intuition for 'meaning' is intended to be very broad. A separate, large comment is included for those who want to investigate more on what kind of meaning can be represented in what form."^^xsd:string .

:expressesConcept a rdf:Property ;
	rdfs:domain :InformationObject ;
	rdfs:range :Concept ;
	rdfs:subPropertyOf :expresses ;
	dc:identifier "expresses concept@en"^^xsd:string , "esprime il concetto@it"^^xsd:string ;
	dc:description "A relation between an InformationObject and a Concept , e.g. the term 'dog' expresses the Concept 'dog'. For expressing a relational meaning, see the more general object property: expresses"^^xsd:string .

:farFrom a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "far from@en"^^xsd:string ;
	dc:description "Generic distance relation between any Entity(s). E.g. Rome is far from Beijing, astronomy is far from necromancy."^^xsd:string .

:follows a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "follows@en"^^xsd:string , "segue@it"^^xsd:string ;
	dc:description "A relation between entities, expressing a 'sequence' schema. E.g. 'year 2000 follows 1999', 'preparing coffee' follows 'deciding what coffee to use', 'II World War follows I World War', etc. It can be used between tasks, processes or time intervals, and subproperties would fit best in order to distinguish the different uses."^^xsd:string .

:DirectlyFollows a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :follows ;
	dc:identifier "follows@en"^^xsd:string , "segue@it"^^xsd:string ;
	dc:description "A relation between entities, expressing a 'sequence' schema. E.g. 'year 2000 follows 1999', 'preparing coffee' follows 'deciding what coffee to use', 'II World War follows I World War', etc. It can be used between tasks, processes or time intervals, and subproperties would fit best in order to distinguish the different uses."^^xsd:string .

:hasCommonBoundary a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "has common boundary@en"^^xsd:string ;
	dc:description "A relation to encode either formal or informal characterizations of 'boundaries' common to two different entities: an Event that ends when another begins, two abstract regions that have a common topological boundary, two objects that are said to be 'in contact' from a commonsense perspective, etc."^^xsd:string .

:hasConstituent a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "has constituent@en"^^xsd:string , "ha costituente@it"^^xsd:string ;
	dc:description "'Constituency' depends on some layering of the world described by the ontology. For example, scientific granularities (e.g. body-organ-tissue-cell) or ontological 'strata' (e.g. social-mental-biological-physical) are typical layerings. Intuitively, a constituent is a part belonging to a lower layer. Since layering is actually a partition of the world described by the ontology, constituents are not properly classified as parts, although this kinship can be intuitive for common sense. A desirable advantage of this distinction is that we are able to talk e.g. of physical constituents of non-physical objects (e.g. systems), while this is not possible in terms of parts. Example of are the persons constituting a social system, the molecules constituting a person, the atoms constituting a river, etc. In all these examples, we notice a typical discontinuity between the constituted and the constituent object: e.g. a social system is conceptualized at a different layer from the persons that constitute it, a person is conceptualized at a different layer from the molecules that constitute them, and a river is conceptualized at a different layer from the atoms that constitute it."^^xsd:string .

:hasDataValue a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range xsd:anyType ;
	dc:identifier "has data value@en"^^xsd:string , "ha valore@it"^^xsd:string ;
	dc:description "A datatype property that encodes values from a datatype for an Entity. There are several ways to encode values in DOLCE (Ultralite): 1) Directly assert an xsd:_ value to an Entity by using hasDataValue 2) Assert a Region for an Entity by using hasRegion, and then assert an xsd:_ value to that Region, by using hasRegionDataValue 3) Assert a Quality for an Entity by using hasQuality, then assert a Region for that Quality, and assert an xsd:_ value to that Region, by using hasRegionDataValue 4) When the value is required, but not directly observed, assert a Parameter for an xsd:_ value by using hasParameterDataValue, and then associate the Parameter to an Entity by using isConstraintFor 5) When the value is required, but not directly observed, you can also assert a Parameter for a Region by using parametrizes, and then assert an xsd:_ value to that Region, by using hasRegionDataValue The five approaches obey different requirements. For example, a simple value can be easily asserted by using pattern (1), but if one needs to assert an interval between two values, a Region should be introduced to materialize that interval, as pattern (2) suggests. Furthermore, if one needs to distinguish the individual Quality of a value, e.g. the particular nature of the density of a substance, pattern (3) can be used. Patterns (4) and (5) should be used instead when a constraint or a selection is modeled, independently from the actual observation of values in the real world."^^xsd:string .

:hasLocation a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "has location@en"^^xsd:string , "ha localizzazione@it"^^xsd:string ;
	dc:description "A generic, relative localization, holding between any entities. E.g. 'the cat is on the mat', 'Omar is in Samarcanda', 'the wound is close to the femural artery'. For 'absolute' locations, see SpaceRegion"^^xsd:string .

:hasMember a rdf:Property ;
	rdfs:domain :Collection ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "has member@en"^^xsd:string , "ha membro@it"^^xsd:string ;
	dc:description "A relation between collections and entities, e.g. 'my collection of saxophones includes an old Adolphe Sax original alto' (i.e. my collection has member an Adolphe Sax alto)."^^xsd:string .

:hasPart a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "has part@en"^^xsd:string , "ha parte@it"^^xsd:string ;
	dc:description "A schematic relation between any entities, e.g. 'the human body has a brain as part', '20th century contains year 1923', 'World War II includes the Pearl Harbour event'. Subproperties and restrictions can be used to specialize hasPart for objects, events, etc."^^xsd:string .

:hasParticipant a rdf:Property ;
	rdfs:domain :Event ;
	rdfs:range :Object ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "has participant@en"^^xsd:string , "ha come partecipante@it"^^xsd:string ;
	dc:description "A relation between an object and a process, e.g. 'John took part in the discussion', 'a large mass of snow fell during the avalanche', or 'a cook, some sugar, flour, etc. are all present in the cooking of a cake'."^^xsd:string .

:hasQuality a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Quality ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "has quality@en"^^xsd:string , "ha qualit?@it"^^xsd:string ;
	dc:description "A relation between entities and qualities, e.g. 'Dmitri's skin is yellowish'."^^xsd:string .

:hasRegion a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Region ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "has region@en"^^xsd:string , "ha attributo@it"^^xsd:string ;
	dc:description "A relation between entities and regions, e.g. 'the number of wheels of that truck is 12', 'the time of the experiment is August 9th, 2004', 'the whale has been localized at 34 degrees E, 20 degrees S'."^^xsd:string .

:hasSetting a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Situation ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "has setting@en"^^xsd:string , "? nel contesto di@it"^^xsd:string ;
	dc:description "A relation between entities and situations, e.g. 'this morning I've prepared my coffee with a new fantastic Arabica', i.e.: (an amount of) a new fantastic Arabica hasSetting the preparation of my coffee this morning."^^xsd:string .

:introduces a rdf:Property ;
	rdfs:domain :Description ;
	rdfs:range :SocialAgent ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "introduces@en"^^xsd:string , "introduce@it"^^xsd:string ;
	dc:description "A relation between a Description and a SocialAgent, e.g. a Constitutional Charter introduces the SocialAgent 'PresidentOfRepublic'."^^xsd:string .

:isAbout a rdf:Property ;
	rdfs:domain :InformationObject ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is about@en"^^xsd:string , "si riferisce a@it"^^xsd:string ;
	dc:description "A relation between information objects and any Entity (including information objects). It can be used to talk about e.g. entities are references of proper nouns: the proper noun 'Leonardo da Vinci' isAbout the Person Leonardo da Vinci; as well as to talk about sets of entities that can be described by a common noun: the common noun 'person' isAbout the set of all persons in a domain of discourse, which can be represented in DOLCE-Ultralite as an individual of the class: Collection . The isAbout relation is reflexive (not expressible in OWL1.0), because information objects are also about themselves."^^xsd:string .

:isCharacterizedBy a rdf:Property ;
	rdfs:domain :Collection ;
	rdfs:range :Concept ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is characterized by@en"^^xsd:string , "? caratterizzato da@it"^^xsd:string .

:isClassifiedBy a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Concept ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is classified by@en"^^xsd:string , "? classificato da@it"^^xsd:string ;
	dc:description "A relation between a Concept and an Entity, e.g. 'John is considered a typical rude man'; your last concert constitutes the achievement of a lifetime; '20-year-old means she's mature enough'."^^xsd:string .

:isConceptUsedIn a rdf:Property ;
	rdfs:domain :Concept ;
	rdfs:range :Description ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is concept used in@en"^^xsd:string , "? un concetto usato in@it"^^xsd:string ;
	dc:description "A more generic relation holding between a Description and a Concept. In order to be used, a Concept must be previously definedIn another Description"^^xsd:string .

:isConceptualizedBy a rdf:Property ;
	rdfs:domain :SocialObject ;
	rdfs:range :Agent ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is conceptualized by@en"^^xsd:string , "? concettualizzato da@it"^^xsd:string ;
	dc:description "A relation stating that an Agent is internally representing a Description . E.g., 'John believes in the conspiracy theory'; 'Niels Bohr created a solar-system metaphor for his atomic theory'; 'Jacques assumes all swans are white'; 'the task force shares the attack plan'."^^xsd:string .

:isConcretelyExpressedBy a rdf:Property ;
	rdfs:domain :SocialObject ;
	rdfs:range :InformationRealization ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is concretely expressed by@en"^^xsd:string , "? espresso concretamente da@it"^^xsd:string ;
	dc:description "A relation between an InformationRealization and a Description, e.g. 'the printout of the Italian Constitution concretelyExpresses the Italian Constitution'. It should be supplied also with a rule stating that the InformationRealization realizes an InformationObject that expresses the Description."^^xsd:string .

:isConstituentOf a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is constituent of@en"^^xsd:string , "? costituente di@it"^^xsd:string ;
	dc:description "'Constituency' depends on some layering of the world described by the ontology. For example, scientific granularities (e.g. body-organ-tissue-cell) or ontological 'strata' (e.g. social-mental-biological-physical) are typical layerings. Intuitively, a constituent is a part belonging to a lower layer. Since layering is actually a partition of the world described by the ontology, constituents are not properly classified as parts, although this kinship can be intuitive for common sense. A desirable advantage of this distinction is that we are able to talk e.g. of physical constituents of non-physical objects (e.g. systems), while this is not possible in terms of parts. Example of are the persons constituting a social system, the molecules constituting a person, the atoms constituting a river, etc. In all these examples, we notice a typical discontinuity between the constituted and the constituent object: e.g. a social system is conceptualized at a different layer from the persons that constitute it, a person is conceptualized at a different layer from the molecules that constitute them, and a river is conceptualized at a different layer from the atoms that constitute it."^^xsd:string .

:isConstraintFor a rdf:Property ;
	rdfs:domain :Parameter ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :classifies ;
	dc:identifier "is constraint for@en"^^xsd:string , "? un vincolo per@it"^^xsd:string ;
	dc:description "A relation between parameters and entities. It allows to assert generic constraints (encoded as parameters), e.g. MinimumAgeForDriving isConstraintFor John (where John is a legal subject under the TrafficLaw). The intended semantics (not expressible in OWL) is that a Parameter isConstraintFor and Entity if the Parameter isParameterFor a Concept that classifies that Entity; moreover, it entails that a Parameter parametrizes a Region that isRegionFor that Entity. The use in OWL is therefore a shortcut to annotate what Parameter constrains what Entity"^^xsd:string .

:isCoveredBy a rdf:Property ;
	rdfs:domain :Collection ;
	rdfs:range :Concept ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is covered by@en"^^xsd:string , "? ricoperto da@it"^^xsd:string ;
	dc:description "A relation between concepts and collections, where a Concept is said to cover a Collection; it corresponds to a link between the (reified) intensional and extensional interpretations of a (reified) class. E.g. the collection of vintage saxophones is covered by the Concept 'Saxophone' with the Parameter 'Vintage'."^^xsd:string .

:isDescribedBy a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Description ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is covered by@en"^^xsd:string , "? descritto da@it"^^xsd:string ;
	dc:description "The relation between an Entity and a Description: a Description gives a unity to a Collection of parts (the components), or constituents, by assigning a Role to each of them in the context of a whole Object (the system). A same Entity can be given different descriptions, for example, an old cradle can be given a unifying Description based on the original aesthetic design, the functionality it was built for, or a new aesthetic functionality in which it can be used as a flower pot."^^xsd:string .

:isExecutedIn a rdf:Property ;
	rdfs:domain :Task ;
	rdfs:range :Action ;
	rdfs:subPropertyOf :classifies ;
	dc:identifier "is executed in@en"^^xsd:string , "? eseguito mediante@it"^^xsd:string ;
	dc:description "A relation between an action and a task, e.g. 'putting some water in a pot and putting the pot on a fire until the water starts bubbling' executes the task 'boiling'."^^xsd:string .

:isExpressedBy a rdf:Property ;
	rdfs:domain :SocialObject ;
	rdfs:range :InformationObject ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is expressed by@en"^^xsd:string , "? espresso da@it"^^xsd:string ;
	dc:description "A relation between a dul:SocialObject (the 'meaning') and a dul:InformationObject (the 'expression'). For example: 'A Beehive is a structure in which bees are kept, typically in the form of a dome or box.' (Oxford dictionary)'; 'the term Beehive expresses the concept Beehive in my apiculture ontology'. The intuition for 'meaning' is intended to be very broad. A separate, large comment is included in the encoding of 'expresses', for those who want to investigate more on what kind of meaning can be represented in what form."^^xsd:string .

:isIntroducedBy a rdf:Property ;
	rdfs:domain :SocialAgent ;
	rdfs:range :Description ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is expressed by@en"^^xsd:string , "? introdotto da@it"^^xsd:string ;
	dc:description "A relation between a Description and a SocialAgent, e.g. a Constitutional Charter introduces the SocialAgent 'PresidentOfRepublic'."^^xsd:string .

:isLocationOf a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is location of@en"^^xsd:string , "? una localizzazione di@it"^^xsd:string ;
	dc:description "A generic, relative localization, holding between any entities. E.g. 'Rome is the seat of the Pope', 'the liver is the location of the tumor'. For 'absolute' locations, see SpaceRegion"^^xsd:string .

:isMemberOf a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Collection ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is member of@en"^^xsd:string , "? membro di@it"^^xsd:string ;
	dc:description "A relation between collections and entities, e.g. 'the Night Watch by Rembrandt is in the Rijksmuseum collection'; 'Davide is member of the Pen Club', 'Igor is one the subjects chosen for the experiment'."^^xsd:string .

:isPartOf a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is part of@en"^^xsd:string , "? parte di@it"^^xsd:string ;
	dc:description "A relation between any entities, e.g.'brain is a part of the human body'."^^xsd:string .

:isParticipantIn a rdf:Property ;
	rdfs:domain :Object ;
	rdfs:range :Event ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is participant in@en"^^xsd:string , "is participant in@it"^^xsd:string ;
	dc:description "A relation between an object and a process, e.g. 'John took part in the discussion', 'a large mass of snow fell during the avalanche', or 'a cook, some sugar, flour, etc. are all present in the cooking of a cake'."^^xsd:string .

:isQualityOf a rdf:Property ;
	rdfs:domain :Quality ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is quality of@en"^^xsd:string , "? una qualit? di@it"^^xsd:string ;
	dc:description "A relation between entities and qualities, e.g. 'Dmitri's skin is yellowish'."^^xsd:string .

:isRealizedBy a rdf:Property ;
	rdfs:domain :InformationObject ;
	rdfs:range :InformationRealization ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is realized by@en"^^xsd:string , "? realizzato da@it"^^xsd:string ;
	dc:description "A relation between an information realization and an information object, e.g. the paper copy of the Italian Constitution realizes the text of the Constitution."^^xsd:string .

:isReferenceOf a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :InformationObject ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is reference of@en"^^xsd:string , "? il riferimento di@it"^^xsd:string ;
	dc:description "A relation between information objects and any Entity (including information objects). It can be used to talk about e.g. entities are references of proper nouns: the proper noun 'Leonardo da Vinci' isAbout the Person Leonardo da Vinci; as well as to talk about sets of entities that can be described by a common noun: the common noun 'person' isAbout the set of all persons in a domain of discourse, which can be represented in DOLCE-Ultralite as an individual of the class: Collection . The isReferenceOf relation is irreflexive, differently from its inverse isAbout."^^xsd:string .

:isReferenceOfInformationRealizedBy a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :InformationRealization ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is reference of information realized by@en"^^xsd:string , "? riferimento dell'informazione realizzata da@it"^^xsd:string ;
	dc:description "The relation between entities and information realizations, e.g. between Italy and a paper copy of the text of the Italian Constitution."^^xsd:string .

:isRegionFor a rdf:Property ;
	rdfs:domain :Region ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is region for@en"^^xsd:string , "? una regione di@it"^^xsd:string ;
	dc:description "A relation between entities and regions, e.g. 'the color of my car is red'."^^xsd:string .

:isRelatedToConcept a rdf:Property ;
	rdfs:domain :Concept ;
	rdfs:range :Concept ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is related to concept@en"^^xsd:string , "? associato al concetto@it"^^xsd:string ;
	dc:description "Any relation between concepts, e.g. superordinated, conceptual parthood, having a parameter, having a task, superordination, etc."^^xsd:string .

:isRelatedToDescription a rdf:Property ;
	rdfs:domain :Description ;
	rdfs:range :Description ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is related to description@en"^^xsd:string , "? associata alla descrizione@it"^^xsd:string ;
	dc:description "Any relation between descriptions."^^xsd:string .

:isRoleOf a rdf:Property ;
	rdfs:domain :Role ;
	rdfs:range :Object ;
	rdfs:subPropertyOf :classifies ;
	dc:identifier "is role of@en"^^xsd:string , "? un ruolo di@it"^^xsd:string ;
	dc:description "A relation between an object and a role, e.g. 'student' is the role of 'John'."^^xsd:string .

:isSatisfiedBy a rdf:Property ;
	rdfs:domain :Description ;
	rdfs:range :Situation ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is satisfied by@en"^^xsd:string , "? soddisfatta da@it"^^xsd:string ;
	dc:description "A relation between a Situation and a Description, e.g. the execution of a Plan satisfies that plan."^^xsd:string .

:isSettingFor a rdf:Property ;
	rdfs:domain :Situation ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is setting for@en"^^xsd:string , "include@it"^^xsd:string ;
	dc:description "A relation between situations and entities, e.g. 'this morning I've prepared my coffee with a new fantastic Arabica', i.e.: the preparation of my coffee this morning is the setting for (an amount of) a new fantastic Arabica."^^xsd:string .

:isSpecializedBy a rdf:Property ;
	rdfs:domain :SocialObject ;
	rdfs:range :SocialObject ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "is specialized by@en"^^xsd:string , "? specializzato da@it"^^xsd:string ;
	dc:description "A partial order relation that holds between social objects. It represents the subsumption relation between e.g. a Concept and another Concept that is broader in extensional interpretation, but narrowe in intensional interpretation. E.g. PhDStudent Role specializes Student Role."^^xsd:string .

:overlaps a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "overlaps@en"^^xsd:string , "sovrapposto a@it"^^xsd:string ;
	dc:description "A schematic relation between any entities, e.g. 'the chest region overlaps with the abdomen region', 'my spoken words overlap with hers', 'the time of my leave overlaps with the time of your arrival', 'fibromyalgia overlaps with other conditions'. Subproperties and restrictions can be used to specialize overlaps for objects, events, time intervals, etc."^^xsd:string .

:parametrizes a rdf:Property ;
	rdfs:domain :Parameter ;
	rdfs:range :Region ;
	rdfs:subPropertyOf :classifies ;
	dc:identifier "parametrizes@en"^^xsd:string , "parametrizza@it"^^xsd:string ;
	dc:description "The relation between a Parameter, e.g. 'MajorAgeLimit', and a Region, e.g. '18_year'. For a more data-oriented relation, see hasDataValue"^^xsd:string .

:precedes a rdf:Property ;
	rdfs:domain :Entity ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "precedes@en"^^xsd:string , "precede@it"^^xsd:string ;
	dc:description "A relation between entities, expressing a 'sequence' schema. E.g. 'year 1999 precedes 2000', 'deciding what coffee to use' precedes 'preparing coffee', 'World War II follows World War I', 'in the Milan to Rome autoroute, Bologna precedes Florence', etc. It can then be used between tasks, processes, time intervals, spatially locate objects, situations, etc. Subproperties can be defined in order to distinguish the different uses."^^xsd:string .

:realizes a rdf:Property ;
	rdfs:domain :InformationRealization ;
	rdfs:range :InformationObject ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "realizes@en"^^xsd:string , "realizza@it"^^xsd:string ;
	dc:description "A relation between an information realization and an information object, e.g. the paper copy of the Italian Constitution realizes the text of the Constitution."^^xsd:string .

:realizesInformationAbout a rdf:Property ;
	rdfs:domain :InformationRealization ;
	rdfs:range :Entity ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "realizes information about@en"^^xsd:string , "realizza informazione che si riferisce a a@it"^^xsd:string ;
	dc:description "The relation between entities and information realizations, e.g. between Italy and a paper copy of the text of the Italian Constitution."^^xsd:string .

:satisfies a rdf:Property ;
	rdfs:domain :Situation ;
	rdfs:range :Description ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "satisfies@en"^^xsd:string , "soddisfa@it"^^xsd:string ;
	dc:description "A relation between a Situation and a Description, e.g. the execution of a Plan satisfies that plan."^^xsd:string .

:specializes a rdf:Property ;
	rdfs:domain :SocialObject ;
	rdfs:range :SocialObject ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "specializes@en"^^xsd:string , "specializza@it"^^xsd:string ;
	dc:description "A partial order relation that holds between social objects. It mainly represents the subsumption relation between e.g. a Concept or Description and another Concept (resp. Description) that is broader in extensional interpretation, but narrower in intensional interpretation. For example, the role PhDStudent specializes the role Student. Another possible use is between a Collection that isCoveredBy a Concept A, and another Collection that isCoveredBy a Concept B that on its turm specializes A. For example, the 70,000 series Selmer Mark VI saxophone Collection specializes the Selmer Mark VI saxophone Collection."^^xsd:string .

:unifies a rdf:Property ;
	rdfs:domain :Description ;
	rdfs:range :Collection ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "unifies@en"^^xsd:string , "unifica@it"^^xsd:string ;
	dc:description "A Collection has a unification criterion, provided by a Description; for example, a community of practice can be unified by a shared theory or interest, e.g. the community that makes research on mirror neurons shares some core knowledge about mirror neurons, which can be represented as a Description MirrorNeuronTheory that unifies the community. There can be several unifying descriptions."^^xsd:string .

:usesConcept a rdf:Property ;
	rdfs:domain :Description ;
	rdfs:range :Concept ;
	rdfs:subPropertyOf :associatedWith ;
	dc:identifier "uses concept@en"^^xsd:string , "usa il concetto@it"^^xsd:string ;
	dc:description "A generic relation holding between a Description and a Concept. In order to be used, a Concept must be previously definedIn another Description. This last condition cannot be encoded for object properties in OWL."^^xsd:string .
