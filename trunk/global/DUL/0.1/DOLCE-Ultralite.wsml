wsmlVariant _"http://www.wsmo.org/wsml/wsml-syntax/wsml-flight"
namespace { _"http://purl.org/ifgi/dul#",
	rdf _"http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    rdfs _"http://www.w3.org/2000/01/rdf-schema#",
    xsd _"http://www.w3.org/2001/XMLSchema#",
    dc _"http://purl.org/dc/elements/1.1/",
    DUL _"http://www.loa-cnr.it/ontologies/DUL.owl#",
	owl _"http://www.w3.org/2002/07/owl#"
 }

ontology DOLCE_Ultralite

 	annotations
        dc#publisher hasValue "IfGI, University of Muenster"
		dc#type hasValue "Foundational Ontology"
		dc#title hasValue "DOLCE+DnS Ultralite"	
		dc#description hasValue "Created by Aldo Gangemi as both a simplification and extension of DOLCE and Descriptions and Situations ontologies. WSML Translation by Marcell Roth"
		dc#source hasValue "http://www.loa-cnr.it/ontologies/DUL.owl"
		dc#subject hasValue "dolce, foundational"	
     endAnnotations
	 
/* Classes */

concept Abstract subConceptOf Entity
	annotations
		dc#identifier hasValue "Abstract@en"
		dc#identifier hasValue "Astratto@it"
		dc#description hasValue "Any Entity that cannot be located in space-time. E.g. mathematical entities: formal semantics elements, regions within dimensional spaces, etc."
	endAnnotations
	
concept Action subConceptOf Event
	annotations
		dc#identifier hasValue "Action@en"
		dc#identifier hasValue "Azione@it"
		dc#description hasValue "An Event with at least one Agent that isParticipantIn it, and that executes a Task that typically isDefinedIn a Plan, Workflow, Project, etc."
	endAnnotations
	
concept Agent subConceptOf Object
	annotations
		dc#identifier hasValue "Agent@en"
		dc#identifier hasValue "Agente@it"
		dc#description hasValue "Any agentive Object , either physical (e.g. a whale, a robot, an oak), or social (e.g. a corporation, an institution, a community). Additional comment: a computational agent can be considered as a PhysicalAgent that realizes a certain class of algorithms (that can be considered as instances of InformationObject) that allow to obtain some behaviors that are considered typical of agents in general. For an ontology of computational objects based on DOLCE see e.g. http://www.loa-cnr.it/COS/COS.owl, and http://www.loa-cnr.it/KCO/KCO.owl."
	endAnnotations
	
concept Amount subConceptOf Region
	annotations
		dc#identifier hasValue "Amount@en"
		dc#identifier hasValue "Quantit@it"
		dc#description hasValue "A quantity, independently from how it is measured, computed, etc."
	endAnnotations
	
concept BiologicalObject subConceptOf PhysicalBody
	annotations
		dc#identifier hasValue "Biological object@en"
	endAnnotations
	
concept ChemicalObject subConceptOf PhysicalBody
	annotations
		dc#identifier hasValue "Chemical object@en"
	endAnnotations
	
concept Classification subConceptOf Situation
	annotations
		dc#identifier hasValue "Classification@en"
		dc#identifier hasValue "Classificazione@it"
		dc#description hasValue "A special kind of Situation that allows to include time indexing for the classifies relation in situations. For example, if a Situation s 'my old cradle is used in these days as a flower pot' isSettingFor the entity 'my old cradle' and the TimeIntervals '8June2007' and '10June2007', and we know that s satisfies a functional Description for aesthetic objects, which defines the Concepts 'flower pot' and 'flower', then we also need to know what concept classifies 'my old cradle' at what time.
			In order to solve this issue, we need to create a sub-situation s' for the classification time: 'my old cradle is a flower pot in 8June2007'. Such sub-situation s' isPartOf s."
	endAnnotations
	
concept Collection subConceptOf SocialObject
	annotations
		dc#identifier hasValue "Collection@en"
		dc#identifier hasValue "Collezione@it"
		dc#description hasValue "Any container for entities that share one or more common properties. E.g. \"stone objects\", \"the nurses\", \"the Louvre Aegyptian collection\", all the elections for the Italian President of the Republic. A collection is not a logical class: a collection is a first-order entity, while a class is second-order."
	endAnnotations
	
concept Collective subConceptOf Collection
	annotations
		dc#identifier hasValue "Collective@en"
		dc#identifier hasValue "Collettivo@it"
		dc#description hasValue "A Collection whose members are agents, e.g. \"the nurses\", \"the Italian rockabilly fans\". Collectives, facon de parler, can act as agents, although they are not assumed here to be agents (they are even disjoint from the class SocialAgent). This is represented by admitting collectives in the range of the relations having Agent in their domain or range."
	endAnnotations
	
concept CollectiveAgent subConceptOf SocialAgent
	annotations
		dc#identifier hasValue "Collective agent@en"
		dc#identifier hasValue "Agente collettivo@it"
		dc#description hasValue "A SocialAgent that is actedBy agents that are (and act as) members of a Collective. A collective agent can have roles that are also roles of those agents.
			For example, in sociology, a 'group action' is the situation in which a number of people (that result to be members of a collective) in a given area behave in a coordinated way in order to achieve a (often common) goal. The Agent in such a Situation is not single, but a CollectiveAgent (a Group). This can be generalized to the notion of social movement, which assumes a large Community or even the entire Society as agents.
			The difference between a CollectiveAgent and an Organization is that a Description that introduces a CollectiveAgent is also one that unifies the corresponding Collective. In practice, this difference makes collective agents 'less stable' than organizations, because they have a dedicated, publicly recognizable Description that is conceived to introduce them."
	endAnnotations

concept Community subConceptOf CollectiveAgent
	annotations
		dc#identifier hasValue "Community@en"
		dc#identifier hasValue "Comunità@it"
	endAnnotations	
	
concept Concept subConceptOf SocialObject
	annotations
		dc#identifier hasValue "Concept@en"
		dc#identifier hasValue "Concetto@it"
		dc#description hasValue "A Concept is a SocialObject, and isDefinedIn some Description; once defined, a Concept can be used in other Description(s). If a Concept isDefinedIn exactly one Description, see the LocalConcept class. The classifies relation relates Concept(s) to Entity(s) at some TimeInterval"
	endAnnotations
	
concept Configuration subConceptOf Collection
	annotations
		dc#identifier hasValue "Configuration@en"
		dc#identifier hasValue "Configurazione@it"
		dc#description hasValue "A collection whose members are 'unified', i.e. organized according to a certain schema that can be represented by a Description.
			Typically, a configuration is the collection that emerges out of a composed entity: an industrial artifact, a plan, a discourse, etc.  
			E.g. a physical book has a configuration provided by the part-whole schema that holds together its cover, pages, ink. That schema, based on the individual relations between the book and its parts, can be represented in a reified way by means of a (structural) description, which is said to 'unify' the book configuration."
	endAnnotations
	
concept Contract subConceptOf Description
	annotations
		dc#identifier hasValue "Contract@en"
		dc#identifier hasValue "Contratto@it"
		dc#description hasValue "(The content of) an agreement between at least two agents that play a Party Role, about some contract object (a Task to be executed)."
	endAnnotations
	
concept Description subConceptOf SocialObject
	annotations
		dc#identifier hasValue "Description@en"
		dc#identifier hasValue "Descrizione@it"
		dc#description hasValue "A Description is a SocialObject that represents a conceptualization. 
It can be thought also as a 'descriptive context' that uses or defines concepts in order to create a view on a 'relational context' (cf. Situation) out of a set of data or observations. 
For example, a Plan is a Description of some actions to be executed by agents in a certain way, with certain parameters; a Diagnosis is a Description that provides an interpretation for a set of observed entities, etc."
	endAnnotations
	
concept Design subConceptOf Description
	annotations
		dc#identifier hasValue "Design@en"
		dc#identifier hasValue "Design@it"
		dc#description hasValue "A Description of the Situation, in terms of structure and function, held by an Entity for some reason.
			A design is usually accompanied by the rationales behind the construction of the designed Entity (i.e. of the reasons why a design is claimed to be as such). For example, the actual design (a Situation) of a car or of a law is based on both the specification (a Description) of the structure and the rationales used to construct cars or a specific law.
			While designs typically describe entities to be constructed, they can also be used to describe 'refunctionalized' entities, or to hypothesize unknown functions."
	endAnnotations
	
concept DesignedArtifact subConceptOf PhysicalArtifact
	annotations
		dc#identifier hasValue "Designed artifact@en"
		dc#identifier hasValue "Artefatto progettato@it"
		dc#description hasValue "A PhysicalArtifact that is also described by a Design. This excludes simple recycling or refunctionalization of natural objects. Most common sense 'artifacts' can be included in this class: cars, lamps, houses, chips, etc."
	endAnnotations
	
concept DesignedSubstance subConceptOf {DesignedArtifact, FunctionalSubstance} 
	annotations
		dc#identifier hasValue "DesignedSubstance@en"
	endAnnotations
	
concept Diagnosis subConceptOf Description
	annotations
		dc#identifier hasValue "Diagnosis@en"
		dc#identifier hasValue "Diagnosi@it"
		dc#description hasValue "A Description of the Situation of a system, usually applied in order to control a normal behaviour, or to explain a notable behavior (e.g. a functional breakdown)."
	endAnnotations
	
concept Entity
	annotations
		dc#identifier hasValue "Entity@en"
		dc#identifier hasValue "Entità@it"
		dc#description hasValue "Anything: real, possible, or imaginary, which some modeller wants to talk about for some purpose."
	endAnnotations
	
concept Event subConceptOf Entity
	annotations
		dc#identifier hasValue "Event@en"
		dc#identifier hasValue "Evento@it"
		dc#description hasValue "Any physical, social, or mental process, event, or state."
	endAnnotations
	
concept EventType subConceptOf Concept
	annotations
		dc#identifier hasValue "Event type@en"
		dc#identifier hasValue "Tipo di evento@it"
		dc#description hasValue "A Concept that classifies an Event . An event type describes how an Event should be interpreted, executed, expected, seen, etc., according to the Description that the EventType isDefinedIn (or used in)"
	endAnnotations
	
concept FormalEntity subConceptOf Abstract
	annotations
		dc#identifier hasValue "Formal entity@en"
		dc#identifier hasValue "Entità formale astratta@it"
		dc#description hasValue "Entities that are formally defined and are considered independent from the social context in which they are used. They cannot be localized in space or time. Also called 'Platonic entities'.
			Mathematical and logical entities are included in this class: sets, categories, tuples, costants, variables, etc.
			Abstract formal entities are distinguished from information objects, which are supposed to be part of a social context, and are localized in space and time, therefore being (social) objects.
			For example, the class 'Quark' is an abstract formal entity from the purely set-theoretical perspective, but it is an InformationObject from the viewpoint of ontology design, when e.g. implemented in a logical language like OWL.
			Abstract formal entities are also distinguished from Concept(s), Collection(s), and Description(s), which are part of a social context, therefore being SocialObject(s) as well.
			For example, the class 'Quark' is an abstract FormalEntity from the purely set-theoretical perspective, but it is a Concept within history of science and cultural dynamics.

			These distinctions allow to represent two different notions of 'semantics': the first one is abstract and formal ('formal semantics'), and formallyInterprets symbols that are about entities whatsoever; for example, the term 'Quark' isAbout the Collection of all quarks, and that Collection isFormalGroundingFor the abstract class 'Quark' (in the extensional sense). 
			The second notion is social, localized in space-time ('social semantics'), and can be used to interpret entities in the intensional sense. For example, the Collection of all quarks isCoveredBy the Concept 'Quark', which is also expressed by the term 'Quark'."
	endAnnotations
	
concept FunctionalSubstance subConceptOf Substance
	annotations
		dc#identifier hasValue "Functional substance@en"
	endAnnotations
	
concept Goal subConceptOf Description
	annotations
		dc#identifier hasValue "Goal@en"
		dc#identifier hasValue "Scopo@it"
		dc#description hasValue "The Description of a Situation that is desired by an Agent, and usually associated to a Plan that describes how to actually achieve it"
	endAnnotations
	
concept Group subConceptOf CollectiveAgent
	annotations
		dc#identifier hasValue "Group@en"
		dc#identifier hasValue "Gruppo@it"
		dc#description hasValue "A CollectiveAgent whose acting agents conceptualize a same SocialRelation."
	endAnnotations
	
concept InformationEntity subConceptOf Entity
	annotations
		dc#identifier hasValue "Information entity@en"
		dc#description hasValue "A piece of information, be it concretely realized or not."
	endAnnotations
	
concept InformationObject subConceptOf {InformationEntity, SocialObject}
	annotations
		dc#identifier hasValue "Information object@en"
		dc#identifier hasValue "Oggetto informativo@it"
		dc#description hasValue "A piece of information, such as a musical composition, a text, a word, a picture, independently from how it is concretely realized."
	endAnnotations
	
concept InformationRealization subConceptOf InformationEntity
	annotations
		dc#identifier hasValue "Information realization@en"
		dc#identifier hasValue "Informazione concreta@it"
		dc#description hasValue "A concrete realization of an InformationObject, e.g. the written document containing the text of a law."
	endAnnotations
	
concept LocalConcept subConceptOf Concept
	annotations
		dc#identifier hasValue "Local concept@en"
		dc#description hasValue "A Concept that isDefinedIn exactly 1 Description. For example, the Concept 'coffee' in a 'preparesCoffee' relation can be defined in that relation, and for all other Description(s) that use it, the isConceptUsedIn property should be applied. Notice therefore that not necessarily all Concept(s) isDefinedIn exactly 1 Description."
	endAnnotations
	
concept Method subConceptOf Description
	annotations
		dc#identifier hasValue "Method@en"
		dc#identifier hasValue "Metodo@it"
		dc#description hasValue "A method is a Description that defines or uses concepts in order to guide carrying out actions aimed at a solution with respect to a problem. 
			It is different from a Plan, because plans could be carried out in order to follow a method, but a method can be followed by executing alternative plans."
	endAnnotations
	
concept Narrative subConceptOf Description
	annotations
		dc#identifier hasValue "Narrative@en"
	endAnnotations
	
concept NaturalPerson subConceptOf {Person, PhysicalAgent}
	annotations
		dc#identifier hasValue "Natural person@en"
		dc#identifier hasValue "Persona fisica@it"
		dc#description hasValue "A person in the physical commonsense intuition: 'have you seen that person walking down the street?'"
	endAnnotations
	
concept Norm subConceptOf Description
	annotations
		dc#identifier hasValue "Norm@en"
		dc#identifier hasValue "Norma@it"
		dc#description hasValue "A social norm."
	endAnnotations
	
concept Object subConceptOf Entity
	annotations
		dc#identifier hasValue "Object@en"
		dc#identifier hasValue "Oggetto@it"
		dc#description hasValue "Any physical, social, or mental object, or a substance"
	endAnnotations
	
concept Organism subConceptOf BiologicalObject
	annotations
		dc#identifier hasValue "Organism@en"
		dc#identifier hasValue "Organismo@it"
		dc#description hasValue "A physical objects with biological characteristics, typically that organisms can self-reproduce."
	endAnnotations
	
concept Organization subConceptOf SocialAgent
	annotations
		dc#identifier hasValue "Organization@en"
		dc#identifier hasValue "Organizzazione@it"
		dc#description hasValue "An internally structured, conventionally created SocialAgent, needing a specific Role and Agent that plays it, in order to act."
	endAnnotations
	
concept Parameter subConceptOf Concept
	annotations
		dc#identifier hasValue "Parameter@en"
		dc#identifier hasValue "Parametro@it"
		dc#description hasValue "A Concept that classifies a Region; the difference between a Region and a Parameter is that regions represent sets of observable values, e.g. the height  of a given building, while parameters represent constraints or selections on observable values, e.g. 'VeryHigh'. Therefore, parameters can also be used to constrain regions, e.g. VeryHigh on a subset of values of the Region Height applied to buildings, or to add an external selection criterion , such as measurement units, to regions, e.g. Meter on a subset of values from the Region Length applied to the Region Length applied to roads."
	endAnnotations
	
concept Pattern subConceptOf Relation
	annotations
		dc#identifier hasValue "Pattern@en"
		dc#description hasValue "Any invariance detected from a dataset, or from observation; also, any invariance proposed based on top-down considerations.
			E.g. patterns detected and abstracted by an organism, by pattern recognition algorithms, by machine learning techniques, etc.
			An occurrence of a pattern is an 'observable', or detected Situation"
	endAnnotations
	
concept Person subConceptOf Agent
	annotations
		dc#identifier hasValue "Person@en"
		dc#identifier hasValue "Persona@it"
		dc#description hasValue "Persons in commonsense intuition, which does not apparently distinguish between either natural or social persons."
	endAnnotations
	
concept Personification subConceptOf SocialAgent
	annotations
		dc#identifier hasValue "Personification@en"
		dc#description hasValue "A social entity with agentive features, but whose status is the result of a cultural transformation from e.g. a PhysicalObject, an Event, an Abstract, another SocialObject, etc. For example: the holy grail, deus ex machina, gods, magic wands, etc."
	endAnnotations
	
concept PhysicalAgent subConceptOf {Agent, PhysicalObject}
	annotations
		dc#identifier hasValue "Physical agent@en"
		dc#identifier hasValue "Agente fisico@it"
		dc#description hasValue "A PhysicalObject that is capable of self-representing (conceptualizing) a Description in order to plan an Action. 
			A PhysicalAgent is a substrate for (actsFor) a Social Agent"
	endAnnotations
	
concept PhysicalArtifact subConceptOf PhysicalObject
	annotations
		dc#identifier hasValue "Physical artifact@en"
		dc#identifier hasValue "Artefatto fisico@it"
		dc#description hasValue "Any PhysicalObject that isDescribedBy a Plan .
			This axiomatization is weak, but allows to talk of artifacts in a very general sense, i.e. including recycled objects, objects with an intentional functional change, natural objects that are given a certain function, even though they are not modified or structurally designed, etc. PhysicalArtifact(s) are not considered disjoint from PhysicalBody(s), in order to allow a dual classification when needed. E.g.,
			FunctionalSubstance(s) are included here as well.
			Immaterial (non-physical) artifacts (e.g. texts, ideas, cultural movements, corporations, communities, etc. can be modelled as social objects (see SocialObject), which are all 'artifactual' in the weak sense assumed here."
	endAnnotations
	
concept PhysicalAttribute subConceptOf Region
	annotations
		dc#identifier hasValue "Physical attribute@en"
		dc#identifier hasValue "Caratteristica fisica@it"
		dc#description hasValue "Physical value of a physical object, e.g. density, color, etc."
	endAnnotations
	
concept PhysicalBody subConceptOf PhysicalObject
	annotations
		dc#identifier hasValue "Physical body@en"
		dc#description hasValue "Physical bodies are PhysicalObject(s), for which we tend to neutralize any possible artifactual character. They can have several granularity levels: geological, chemical, physical, biological, etc."
	endAnnotations
		
concept PhysicalObject subConceptOf Object
	annotations
		dc#identifier hasValue "Physical object@en"
		dc#identifier hasValue "Oggetto fisico@it"
		dc#description hasValue "Any Object that has a proper space region. The prototypical physical object has also an associated mass, but the nature of its mass can greatly vary based on the epistemological status of the object (scientifically measured, subjectively possible, imaginary)."
	endAnnotations
	
concept PhysicalPlace subConceptOf PhysicalObject
	annotations
		dc#identifier hasValue "Physical place@en"
		dc#identifier hasValue "Luogo fisico@it"
		dc#description hasValue "A physical object that is inherently located; for example, a water area."
	endAnnotations
	
concept Place subConceptOf SocialObject
	annotations
		dc#identifier hasValue "Place@en"
		dc#identifier hasValue "Luogo@it"
		dc#description hasValue "A location, in a very generic sense: a political geographic entity (Roma, Lesotho), a non-material location determined by the presence of other entities (\"the area close to Roma\"), pivot events or signs (\"the area where the helicopter fell\"), complements of other entities (\"the area under the table\"), etc. 
			In this generic sense, a Place is an \"approximate\" location. For an \"absolute\" location, see the class SpaceRegion"
	endAnnotations
	
concept Plan subConceptOf Description
	annotations
		dc#identifier hasValue "Plan@en"
		dc#identifier hasValue "Piano@it"
		dc#description hasValue "A Description having an explicit Goal, to be achieved by executing the plan"
	endAnnotations
	
concept PlanExecution subConceptOf Situation
	annotations
		dc#identifier hasValue "Plan execution@en"
		dc#identifier hasValue "Esecuzione di piano@it"
		dc#description hasValue "Plan executions are situations that proactively satisfy a plan. Subplan executions are proper parts of the whole plan execution."
	endAnnotations
	
concept Process subConceptOf Event
	annotations
		dc#identifier hasValue "Process@en"
		dc#identifier hasValue "Processo@it"
		dc#description hasValue "This is a placeholder for events that are considered in their evolution, or anyway not strictly dependent on agents, tasks, and plans. 
			See Event class for some thoughts on classifying events. See also 'Transition'."
	endAnnotations
	
concept Project subConceptOf Plan
	annotations
		dc#identifier hasValue "Project@en"
		dc#identifier hasValue "Progetto@it"
		dc#description hasValue "A Plan that defines Role(s), Task(s), and a specific structure for tasks to be executed in relation to goals to be achieved, in order to achieve the main goal of the project. In other words, a project is a plan with a subgoal structure and multiple roles and tasks."
	endAnnotations
	
concept Quality subConceptOf Entity
	annotations
		dc#identifier hasValue "Quality@en"
		dc#identifier hasValue "QualitÃ@it"
		dc#description hasValue "Any aspect of an Entity (but not a part of it), which cannot exist without that Entity. For example, the way the surface of a specific PhysicalObject looks like is a Quality, while the encoding of that Quality into e.g. a PhysicalAttribute should be modeled as a Region. 
			From the design viewpoint, the Quality-Region distinction is useful only when individual aspects of an Entity are considered in a domain of discourse. 
			For example, in an automotive context, it would be irrelevant to consider the aspects of car windows for a specific car, unless the factory wants to check a specific window against design parameters (anomaly detection). 
			On the other hand, in an antiques context, the individual aspects for a specific piece of furniture are a major focus of attention, and may constitute the actual added value, because the design parameters for old furniture are often not fixed, and may not be viewed as 'anomalies'."
	endAnnotations
	
concept Region subConceptOf Abstract
	annotations
		dc#identifier hasValue "Region@en"
		dc#identifier hasValue "Regione@it"
		dc#description hasValue "Any region in a dimensional space (a dimensional space is a maximal Region), which can be used as a value for a quality of an Entity . For example, TimeInterval, SpaceRegion, PhysicalAttribute, Amount, SocialAttribute are all subclasses of Region. 
			Regions are not data values in the ordinary knowledge representation sense; in order to get patterns for modelling data, see the properties: representsDataValue and hasDataValue"
	endAnnotations
	
concept Relation subConceptOf Description
	annotations
		dc#identifier hasValue "Relation@en"
		dc#identifier hasValue "Relazione@it"
		dc#description hasValue "Relations are descriptions that can be considered as the counterpart of formal relations (that are included in the FormalEntity class).
			For example, 'givingGrantToInstitution(x,y,z)' with three argument types: Provider(x),Grant(y),Recipient(z), can have a Relation counterpart: 'GivingGrantToInstitution', which defines three Concept instances: Provider,Grant,Recipient.
			Since social objects are not formal entities, Relation includes here any 'relation-like' entity in common sense, including social relations."
	endAnnotations
	
concept Right subConceptOf Description
	annotations
		dc#identifier hasValue "Right@en"
		dc#identifier hasValue "Diritto@it"
		dc#description hasValue "A legal position by which an Agent is entitled to obtain something from another Agent , under specified circumstances, through an enforcement explicited either in a Law, Contract , etc."
	endAnnotations
	
concept Role subConceptOf Concept
	annotations
		dc#identifier hasValue "Role@en"
		dc#identifier hasValue "Ruolo@it"
		dc#description hasValue "A Concept that classifies an Object"
	endAnnotations
	
concept Set subConceptOf FormalEntity
	annotations
		dc#identifier hasValue "Set@en"
		dc#identifier hasValue "Insieme@it"
	endAnnotations
	
concept Situation subConceptOf SocialObject
	annotations
		dc#identifier hasValue "Situation@en"
		dc#identifier hasValue "Situazione@it"
		dc#description hasValue "A view, consistent with ('satisfying') a Description, on a set of entities. 
			It can also be seen as a 'relational context' created by an observer on the basis of a 'frame' (i.e. a Description). 
			For example, a PlanExecution is a context including some actions executed by agents according to certain parameters and expected tasks to be achieved from a Plan; a DiagnosedSituation is a context of observed entities that is interpreted on the basis of a Diagnosis, etc.
			Situation is also able to represent reified n-ary relations, where isSettingFor is the top-level relation for all binary projections of the n-ary relation. If used in a transformation pattern for n-ary relations, the designer should take care of creating only one subclass of Situation for each n-ary relation, otherwise the 'identification constraint' (Calvanese et al., IJCAI 2001) could be violated."
	endAnnotations
	
concept SocialAgent subConceptOf {Agent, SocialObject}
	annotations
		dc#identifier hasValue "Social agent@en"
		dc#identifier hasValue "Agente sociale@it"
		dc#description hasValue "Any individual whose existence is granted simply by its social communicability and capability of action (through some PhysicalAgent)."
	endAnnotations
	
concept SocialObject subConceptOf Object
	annotations
		dc#identifier hasValue "Social object@en"
		dc#identifier hasValue "Oggetto sociale@it"
		dc#description hasValue "Any Object that exists only within some communication Event, in which at least one PhysicalObject participates in. 
			In other words, all objects that have been or are created in the process of social communication: for the sake of communication (InformationObject), for incorporating new individuals (SocialAgent, Place), for contextualizing existing entities (Situation), for collecting existing entities (Collection), or for describing existing entities (Description, Concept).
			Being dependent on communication, all social objects need to be expressed by some information object (information object are self-expressing)."
	endAnnotations
	
concept SocialAttribute subConceptOf Region
	annotations
		dc#identifier hasValue "Social attribute@en"
		dc#identifier hasValue "Caratteristica sociale@it"
		dc#description hasValue "Any Region in a dimensional space that is used to represent some characteristic of a SocialObject, e.g. judgment values, social scalars, statistical attributes over a collection of entities, etc."
	endAnnotations
	
concept SocialPerson subConceptOf {Person, SocialAgent}
	annotations
		dc#identifier hasValue "Social person@en"
		dc#identifier hasValue "Persona sociale@it"
		dc#description hasValue "A SocialAgent that needs the existence of a specific NaturalPerson in order to act (but the lifetime of the NaturalPerson has only to overlap that of the SocialPerson)."
	endAnnotations
	
concept SocialRelation subConceptOf Relation
	annotations
		dc#identifier hasValue "Social relation@en"
		dc#identifier hasValue "Relazione sociale@it"
		dc#description hasValue "Any social relationship"
	endAnnotations
	
concept SpaceRegion subConceptOf Region
	annotations
		dc#identifier hasValue "Space region@en"
		dc#identifier hasValue "Regione di spazio@it"
		dc#description hasValue "Any Region in a dimensional space that is used to localize an Entity ; i.e., it is not used to represent some characteristic (e.g. it excludes time intervals, colors, size values, judgment values, etc.). Differently from a Place , a space region has a specific dimensional space."
	endAnnotations
	
concept SpatioTemporalRegion subConceptOf Region
	annotations
		dc#identifier hasValue "Spatio temporal region@en"
	endAnnotations
	
concept Substance subConceptOf PhysicalBody
	annotations
		dc#identifier hasValue "Substance@en"
		dc#identifier hasValue "Sostanza@it"
		dc#description hasValue "Any PhysicalBody that has not necessarily specified (designed) boundaries, e.g. a pile of trash, some sand, etc. 
			In this sense, an artistic object made of trash or a dose of medicine in the form of a pill would be a FunctionalSubstance, and a DesignedArtifact, since its boundaries are specified by a Design; aleatoric objects that are outcomes of an artistic process might be still considered DesignedArtifact(s), and Substance(s)."
	endAnnotations
	
concept Task subConceptOf EventType
	annotations
		dc#identifier hasValue "Task@en"
		dc#identifier hasValue "Task@it"
		dc#description hasValue "An EventStructure that classifies an Action to be executed"
	endAnnotations
	
concept Theory subConceptOf Description
	annotations
		dc#identifier hasValue "Theory@en"
		dc#identifier hasValue "Teoria@it"
		dc#description hasValue "A Theory is a Description that represents a set of assumptions for describing something, usually general. Scientific, philosophical, and commonsense theories can be included here.
			This class can also be used to act as 'naturalized reifications' of logical theories (of course, they will be necessarily incomplete in this case, because second-order entities are represented as first-order ones)."
	endAnnotations
	
concept TimeInterval subConceptOf Region
	annotations
		dc#identifier hasValue "Time interval@en"
		dc#identifier hasValue "Intervallo di tempo@it"
		dc#description hasValue "Any Region in a dimensional space that aims at representing time."
	endAnnotations
	
concept Transition subConceptOf Situation
	annotations
		dc#identifier hasValue "Transition@en"
		dc#identifier hasValue "Transizione@it"
		dc#description hasValue "A transition is a Situation that creates a context for three TimeInterval(s), two additional different Situation(s), one Event, one Process, and at least one Object: the Event is observed as the cause for the transition, one Situation is the state before the transition, the second Situation is the state after the transition, the Process is the invariance under some different transitions (including the one represented here), in which at least one Object is situated. Finally, the time intervals position the situations and the transitional event in time.
			This class of situations partly encodes the ontology underlying typical engineering algebras for processes, e.g. Petri Nets. 
			A full representation of the transition ontology is outside the expressivity of OWL, because we would need qualified cardinality restrictions,  coreference, property equivalence, and property composition."
	endAnnotations
	
concept TypeCollection subConceptOf Collection
	annotations
		dc#identifier hasValue "Type collection@en"
		dc#identifier hasValue "Collezione di un tipo@it"
		dc#description hasValue "A Collection whose members are the maximal set of individuals that share the same (named) type, e.g. \"the gem stones\", \"the Italians\".
			This class is very useful to apply a variety of the so-called \"ClassesAsValues\" design pattern, when it is used to talk about the extensional aspect of a class. An alternative variety of the pattern applies to the intensional aspect of a class, and the class Concept should be used instead."
	endAnnotations
	
concept UnitOfMeasure subConceptOf Parameter
	annotations
		dc#identifier hasValue "Unit of measure@en"
		dc#identifier hasValue "Unità di misura@it"
		dc#description hasValue "Units of measure are conceptualized here as parameters on regions, which can be valued as datatype values."
	endAnnotations
	
concept Workflow subConceptOf Plan
	annotations
		dc#identifier hasValue "Workflow@en"
		dc#identifier hasValue "Workflow@it"
		dc#description hasValue "A Plan that defines Role(s), Task(s), and a specific structure for tasks to be executed, usually supporting the work of an Organization"
	endAnnotations
	
concept WorkflowExecution subConceptOf PlanExecution
	annotations
		dc#identifier hasValue "Workflow execution@en"
		dc#identifier hasValue "Esecuzione di workflow@it"
	endAnnotations
	
	
/* Relations */

relation actsFor (ofType Agent, ofType SocialAgent) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "acts for@en"
		dc#identifier hasValue "agisce per@it"
		dc#description hasValue "The relation holding between any Agent, and a SocialAgent. In principle, a SocialAgent requires at least one PhysicalAgent in order to act, but this dependency can be 'delegated'; e.g. a university can be acted for by a department, which on its turm is acted for by physical agents."
	endAnnotations	
	
relation actsThrough (ofType Agent, ofType SocialAgent) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "acts for@en"
		dc#identifier hasValue "agisce per@it"
		dc#description hasValue "The relation holding between a PhysicalAgent and a SocialAgent. In principle, a SocialAgent requires at least one PhysicalAgent in order to act, but this dependency can be 'delegated';, e.g. a university can be acted for by a department, which is acted for by physical agents. AKA isActedBy"
	endAnnotations

relation associatedWith (ofType Entity, ofType Entity)
	annotations
		dc#identifier hasValue "associated with@en"
		dc#description hasValue "A catch-all object property, useful for alignment and querying purposes."
	endAnnotations	
	
relation characterizes (ofType Concept, ofType Collection) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "characterizes@en"
		dc#identifier hasValue "caratterizza@it"
		dc#description hasValue "TA relation between concepts and collections, where a Concept is said to characterize a Collection; it corresponds to a link between the (reified) intensional and extensional interpretations of a _proper subset of_ a (reified) class. This is different from covers, because it refers to an interpretation the entire reified class.
			E.g. the collection of vintage saxophones is characterized by the Concept 'manufactured by hand', while it gets covered by the Concept 'Saxophone' with the Parameter 'Vintage'."
	endAnnotations	
	
relation classifies (ofType Concept, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "classifies@en"
		dc#identifier hasValue "classifica@it"
		dc#description hasValue "A relation between a Concept and an Entity, e.g. the Role 'student' classifies a Person 'John'."
	endAnnotations	
	
relation co-participatesWith (ofType Object, ofType Object) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "co-participates with@en"
		dc#identifier hasValue "copartecipa con@it"
		dc#description hasValue "A relation between two objects participating in a same Event; e.g., 'Vitas and Jimmy are playing tennis'."
	endAnnotations	
	
relation conceptualizes (ofType Agent, ofType SocialObject) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "conceptualizes@en"
		dc#identifier hasValue "concettualizza@it"
		dc#description hasValue "A relation stating that an Agent is internally representing a SocialObject: situations, descriptions, concepts, etc. E.g., 'John believes in the conspiracy theory'; 'Niels Bohr created the solar-system metaphor for the atomic theory'; 'Jacques assumes all swans are white'; 'the task force members share the attack plan'.
Conceptualizations can be distinguished into different forms, primarily based on the type of SocialObject that is conceptualized. Descriptions and concepts can be 'assumed', situations can be 'believed' or 'known', plans can be 'adopted', etc. (see ontology: http://www.ontologydesignpatterns.org/ont/dul/Conceptualization.owl.)."
	endAnnotations	
	
relation concretelyExpresses (ofType InformationRealization, ofType SocialObject) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "concretely expresses@en"
		dc#identifier hasValue "esprime concretamente@it"
		dc#description hasValue "A relation between an InformationRealization and a Description, e.g. 'the printout of the Italian Constitution concretelyExpresses the Italian Constitution'. It should be supplied also with a rule stating that the InformationRealization realizes an InformationObject that expresses the Description."
	endAnnotations
	
relation covers (ofType Concept, ofType Collection) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "covers@en"
		dc#identifier hasValue "ricopre@it"
		dc#description hasValue "A relation between concepts and collections, where a Concept is said to cover a Collection; it corresponds to a link between the (reified) intensional and extensional interpretations of a (reified) class.
			E.g. the collection of vintage saxophones is covered by the Concept 'Saxophone' with the Parameter 'Vintage'."
	endAnnotations	
	
relation describes (ofType Description, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "describes@en"
		dc#identifier hasValue "descrive@it"
		dc#description hasValue "The relation between a Description and an Entity : a Description gives a unity to a Collection of parts (the components), or constituents, by assigning a Role to each of them in the context of a whole Object (the system).
			A same Entity can be given different descriptions, for example, an old cradle can be given a unifying Description based on the original aesthetic design, the functionality it was built for, or a new aesthetic functionality in which it can be used as a flower pot."
	endAnnotations

relation expresses (ofType InformationObject, ofType SocialObject) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "expresses@en"
		dc#identifier hasValue "esprime@it"
		dc#description hasValue "A relation between an InformationObject and a 'meaning', generalized here as a 'SocialObject'. For example: 'A Beehive is a structure in which bees are kept, typically in the form of a dome or box.' (Oxford dictionary)'; 'the term Beehive expresses the concept Beehive in my apiculture ontology'.
			The intuition for 'meaning' is intended to be very broad. A separate, large comment is included for those who want to investigate more on what kind of meaning can be represented in what form."
	endAnnotations	
	
relation expressesConcept (ofType InformationObject, ofType Concept) subRelationOf expresses
	annotations
		dc#identifier hasValue "expresses concept@en"
		dc#identifier hasValue "esprime il concetto@it"
		dc#description hasValue "A relation between an InformationObject and a Concept , e.g. the term 'dog' expresses the Concept 'dog'. For expressing a relational meaning, see the more general object property: expresses"
	endAnnotations	
	
relation farFrom (ofType Entity, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "far from@en"
		dc#description hasValue "Generic distance relation between any Entity(s). E.g. Rome is far from Beijing, astronomy is far from necromancy."
	endAnnotations	
	
relation follows (ofType Entity, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "follows@en"
		dc#identifier hasValue "segue@it"
		dc#description hasValue "A relation between entities, expressing a 'sequence' schema. 
			E.g. 'year 2000 follows 1999', 'preparing coffee' follows 'deciding what coffee to use', 'II World War follows I World War', etc. 
			It can be used between tasks, processes or time intervals, and subproperties would fit best in order to distinguish the different uses."
	endAnnotations	
	
relation DirectlyFollows (ofType Entity, ofType Entity) subRelationOf follows
	annotations
		dc#identifier hasValue "follows@en"
		dc#identifier hasValue "segue@it"
		dc#description hasValue "A relation between entities, expressing a 'sequence' schema. 
			E.g. 'year 2000 follows 1999', 'preparing coffee' follows 'deciding what coffee to use', 'II World War follows I World War', etc. 
			It can be used between tasks, processes or time intervals, and subproperties would fit best in order to distinguish the different uses."
	endAnnotations	
	
relation hasCommonBoundary (ofType Entity, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "has common boundary@en"
		dc#description hasValue "A relation to encode either formal or informal characterizations of 'boundaries' common to two different entities: an Event that ends when another begins, two abstract regions that have a common topological boundary, two objects that are said to be 'in contact' from a commonsense perspective, etc."
	endAnnotations	
	
relation hasConstituent (ofType Entity, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "has constituent@en"
		dc#identifier hasValue "ha costituente@it"
		dc#description hasValue "'Constituency' depends on some layering of  the world described by the ontology. For example, scientific granularities (e.g. body-organ-tissue-cell) or ontological 'strata' (e.g. social-mental-biological-physical) are  typical layerings. 
			Intuitively, a constituent is a part belonging to a lower layer. Since layering is actually a partition of the world described by the ontology, constituents are not properly classified as parts, although this kinship can be intuitive for common sense.
			A desirable advantage of this distinction is that we are able to talk e.g. of physical constituents of non-physical objects (e.g. systems), while this is not possible in terms of parts.
			Example of are the persons constituting a social system, the molecules constituting a person, the atoms constituting a river, etc. 
			In all these examples, we notice a typical discontinuity between the constituted and the constituent object: e.g. a social system is conceptualized at a different layer from the persons that constitute it, a person is conceptualized at a different layer from the molecules that constitute them, and a river is conceptualized at a different layer from the atoms that constitute it."
	endAnnotations
	
relation hasDataValue (ofType Entity, ofType xsd#anyType)
	annotations
		dc#identifier hasValue "has data value@en"
		dc#identifier hasValue "ha valore@it"
		dc#description hasValue "A datatype property that encodes values from a datatype for an Entity. There are several ways to encode values in DOLCE (Ultralite): 
			1) Directly assert an xsd:_ value to an Entity by using hasDataValue 
			2) Assert a Region for an Entity by using hasRegion, and then assert an xsd:_ value to that Region, by using hasRegionDataValue 
			3) Assert a Quality for an Entity by using hasQuality, then assert a Region for that Quality, and assert an xsd:_ value to that Region, by using hasRegionDataValue 
			4) When the value is required, but not directly observed, assert a Parameter for an xsd:_ value by using hasParameterDataValue, and then associate the Parameter to an Entity by using isConstraintFor 
			5) When the value is required, but not directly observed, you can also assert a Parameter for a Region by using parametrizes, and then assert an xsd:_ value to that Region, by using hasRegionDataValue The five approaches obey different requirements. 
			For example, a simple value can be easily asserted by using pattern (1), but if one needs to assert an interval between two values, a Region should be introduced to materialize that interval, as pattern (2) suggests. Furthermore, if one needs to distinguish the individual Quality of a value, e.g. the particular nature of the density of a substance, pattern (3) can be used. Patterns (4) and (5) should be used instead when a constraint or a selection is modeled, independently from the actual observation of values in the real world."
	endAnnotations
	
relation hasLocation (ofType Entity, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "has location@en"
		dc#identifier hasValue "ha localizzazione@it"
		dc#description hasValue "A generic, relative localization, holding between any entities. E.g. 'the cat is on the mat', 'Omar is in Samarcanda', 'the wound is close to the femural artery'.
			For 'absolute' locations, see SpaceRegion"
	endAnnotations

relation hasMember (ofType Collection, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "has member@en"
		dc#identifier hasValue "ha membro@it"
		dc#description hasValue "A relation between collections and entities, e.g. 'my collection of saxophones includes an old Adolphe Sax original alto' (i.e. my collection has member an Adolphe Sax alto)."
	endAnnotations
	
relation hasPart (ofType Entity, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "has part@en"
		dc#identifier hasValue "ha parte@it"
		dc#description hasValue "A schematic relation between any entities, e.g. 'the human body has a brain as part', '20th century contains year 1923', 'World War II includes the Pearl Harbour event'.
			Subproperties and restrictions can be used to specialize hasPart for objects, events, etc."
	endAnnotations
	
relation hasParticipant (ofType Event, ofType Object) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "has participant@en"
		dc#identifier hasValue "ha come partecipante@it"
		dc#description hasValue "A relation between an object and a process, e.g. 'John took part in the discussion', 'a large mass of snow fell during the avalanche', or 'a cook, some sugar, flour, etc. are all present in the cooking of a cake'."
	endAnnotations
	
relation hasQuality (ofType Entity, ofType Quality) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "has quality@en"
		dc#identifier hasValue "ha qualità@it"
		dc#description hasValue "A relation between entities and qualities, e.g. 'Dmitri's skin is yellowish'."
	endAnnotations
	
relation hasRegion (ofType Entity, ofType Region) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "has region@en"
		dc#identifier hasValue "ha attributo@it"
		dc#description hasValue "A relation between entities and regions, e.g. 'the number of wheels of that truck is 12', 'the time of the experiment is August 9th, 2004', 'the whale has been localized at 34 degrees E, 20 degrees S'."
	endAnnotations
	
relation hasSetting (ofType Entity, ofType Situation) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "has setting@en"
		dc#identifier hasValue "è nel contesto di@it"
		dc#description hasValue "A relation between entities and situations, e.g. 'this morning I've prepared my coffee with a new fantastic Arabica', i.e.: (an amount of) a new fantastic Arabica hasSetting the preparation of my coffee this morning."
	endAnnotations
	
relation introduces (ofType Description, ofType SocialAgent) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "introduces@en"
		dc#identifier hasValue "introduce@it"
		dc#description hasValue "A relation between a Description and a SocialAgent, e.g. a Constitutional Charter introduces the SocialAgent 'PresidentOfRepublic'."
	endAnnotations

relation isAbout (ofType InformationObject, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is about@en"
		dc#identifier hasValue "si riferisce a@it"
		dc#description hasValue "A relation between information objects and any Entity (including information objects). It can be used to talk about e.g. entities are references of proper nouns: the proper noun 'Leonardo da Vinci' isAbout the Person Leonardo da Vinci; as well as to talk about sets of entities that can be described by a common noun: the common noun 'person' isAbout the set of all persons in a domain of discourse, which can be represented in DOLCE-Ultralite as an individual of the class: Collection .
			The isAbout relation is reflexive (not expressible in OWL1.0), because information objects are also about themselves."
	endAnnotations
	
relation isCharacterizedBy (ofType Collection, ofType Concept) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is characterized by@en"
		dc#identifier hasValue "è caratterizzato da@it"
	endAnnotations
	
relation isClassifiedBy (ofType Entity, ofType Concept) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is classified by@en"
		dc#identifier hasValue "è classificato da@it"
		dc#description hasValue "A relation between a Concept and an Entity, e.g. 'John is considered a typical rude man'; your last concert constitutes the achievement of a lifetime; '20-year-old means she's mature enough'."
	endAnnotations
	
relation isConceptUsedIn (ofType Concept, ofType Description) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is concept used in@en"
		dc#identifier hasValue "è un concetto usato in@it"
		dc#description hasValue "A more generic relation holding between a Description and a Concept. In order to be used, a Concept must be previously definedIn another Description"
	endAnnotations
	
relation isConceptualizedBy (ofType SocialObject, ofType Agent) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is conceptualized by@en"
		dc#identifier hasValue "è concettualizzato da@it"
		dc#description hasValue "A relation stating that an Agent is internally representing a Description . E.g., 'John believes in the conspiracy theory'; 'Niels Bohr created a solar-system metaphor for his atomic theory'; 'Jacques assumes all swans are white'; 'the task force shares the attack plan'."
	endAnnotations
	
relation isConcretelyExpressedBy (ofType SocialObject, ofType InformationRealization) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is concretely expressed by@en"
		dc#identifier hasValue "è espresso concretamente da@it"
		dc#description hasValue "A relation between an InformationRealization and a Description, e.g. 'the printout of the Italian Constitution concretelyExpresses the Italian Constitution'. It should be supplied also with a rule stating that the InformationRealization realizes an InformationObject that expresses the Description."
	endAnnotations
	
relation isConstituentOf (ofType Entity, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is constituent of@en"
		dc#identifier hasValue "è costituente di@it"
		dc#description hasValue "'Constituency' depends on some layering of  the world described by the ontology. For example, scientific granularities (e.g. body-organ-tissue-cell) or ontological 'strata' (e.g. social-mental-biological-physical) are  typical layerings. 
			Intuitively, a constituent is a part belonging to a lower layer. Since layering is actually a partition of the world described by the ontology, constituents are not properly classified as parts, although this kinship can be intuitive for common sense.
			A desirable advantage of this distinction is that we are able to talk e.g. of physical constituents of non-physical objects (e.g. systems), while this is not possible in terms of parts.
			Example of are the persons constituting a social system, the molecules constituting a person, the atoms constituting a river, etc. 
			In all these examples, we notice a typical discontinuity between the constituted and the constituent object: e.g. a social system is conceptualized at a different layer from the persons that constitute it, a person is conceptualized at a different layer from the molecules that constitute them, and a river is conceptualized at a different layer from the atoms that constitute it."
	endAnnotations
	
relation isConstraintFor (ofType Parameter, ofType Entity) subRelationOf classifies
	annotations
		dc#identifier hasValue "is constraint for@en"
		dc#identifier hasValue "è un vincolo per@it"
		dc#description hasValue "A relation between parameters and entities. It allows to assert generic constraints (encoded as parameters), e.g. MinimumAgeForDriving isConstraintFor John (where John is a legal subject under the TrafficLaw).
			The intended semantics (not expressible in OWL) is that a Parameter isConstraintFor and Entity if the Parameter isParameterFor a Concept that classifies that Entity; moreover, it entails that a Parameter parametrizes a Region that isRegionFor that Entity. The use in OWL is therefore a shortcut to annotate what Parameter constrains what Entity"
	endAnnotations
	
relation isCoveredBy (ofType Collection, ofType Concept) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is covered by@en"
		dc#identifier hasValue "è ricoperto da@it"
		dc#description hasValue "A relation between concepts and collections, where a Concept is said to cover a Collection; it corresponds to a link between the (reified) intensional and extensional interpretations of a (reified) class.
			E.g. the collection of vintage saxophones is covered by the Concept 'Saxophone' with the Parameter 'Vintage'."
	endAnnotations
	
relation isDescribedBy (ofType Entity, ofType Description) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is covered by@en"
		dc#identifier hasValue "è descritto da@it"
		dc#description hasValue "The relation between an Entity and a Description: a Description gives a unity to a Collection of parts (the components), or constituents, by assigning a Role to each of them in the context of a whole Object (the system).
			A same Entity can be given different descriptions, for example, an old cradle can be given a unifying Description based on the original aesthetic design, the functionality it was built for, or a new aesthetic functionality in which it can be used as a flower pot."
	endAnnotations
	
relation isExecutedIn (ofType Task, ofType Action) subRelationOf classifies
	annotations
		dc#identifier hasValue "is executed in@en"
		dc#identifier hasValue "è eseguito mediante@it"
		dc#description hasValue "A relation between an action and a task, e.g. 'putting some water in a pot and putting the pot on a fire until the water starts bubbling' executes the task 'boiling'."
	endAnnotations
	
relation isExpressedBy (ofType SocialObject, ofType InformationObject) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is expressed by@en"
		dc#identifier hasValue "è espresso da@it"
		dc#description hasValue "A relation between a dul:SocialObject (the 'meaning') and a dul:InformationObject (the 'expression'). 
			For example: 'A Beehive is a structure in which bees are kept, typically in the form of a dome or box.' (Oxford dictionary)'; 'the term Beehive expresses the concept Beehive in my apiculture ontology'.
			The intuition for 'meaning' is intended to be very broad. A separate, large comment is included in the encoding of 'expresses', for those who want to investigate more on what kind of meaning can be represented in what form."
	endAnnotations
	
relation isIntroducedBy (ofType SocialAgent, ofType Description) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is expressed by@en"
		dc#identifier hasValue "è introdotto da@it"
		dc#description hasValue "A relation between a Description and a SocialAgent, e.g. a Constitutional Charter introduces the SocialAgent 'PresidentOfRepublic'."
	endAnnotations
	
relation isLocationOf (ofType Entity, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is location of@en"
		dc#identifier hasValue "è una localizzazione di@it"
		dc#description hasValue "A generic, relative localization, holding between any entities. E.g. 'Rome is the seat of the Pope', 'the liver is the location of the tumor'.
			For 'absolute' locations, see SpaceRegion"
	endAnnotations
	
relation isMemberOf (ofType Entity, ofType Collection) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is member of@en"
		dc#identifier hasValue "è membro di@it"
		dc#description hasValue "A relation between collections and entities, e.g. 'the Night Watch by Rembrandt is in the Rijksmuseum collection'; 'Davide is member of the Pen Club', 'Igor is one the subjects chosen for the experiment'."
	endAnnotations
	
relation isPartOf (ofType Entity, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is part of@en"
		dc#identifier hasValue "è parte di@it"
		dc#description hasValue "A relation between any entities, e.g.'brain is a part of the human body'."
	endAnnotations
	
relation isParticipantIn (ofType Object, ofType Event) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is participant in@en"
		dc#identifier hasValue "is participant in@it"
		dc#description hasValue "A relation between an object and a process, e.g. 'John took part in the discussion', 'a large mass of snow fell during the avalanche', or 'a cook, some sugar, flour, etc. are all present in the cooking of a cake'."
	endAnnotations
	
relation isQualityOf (ofType Quality, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is quality of@en"
		dc#identifier hasValue "è una qualità di@it"
		dc#description hasValue "A relation between entities and qualities, e.g. 'Dmitri's skin is yellowish'."
	endAnnotations
	
relation isRealizedBy (ofType InformationObject, ofType InformationRealization) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is realized by@en"
		dc#identifier hasValue "è realizzato da@it"
		dc#description hasValue "A relation between an information realization and an information object, e.g. the paper copy of the Italian Constitution realizes the text of the Constitution."
	endAnnotations
	
relation isReferenceOf (ofType Entity, ofType InformationObject) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is reference of@en"
		dc#identifier hasValue "è il riferimento di@it"
		dc#description hasValue "A relation between information objects and any Entity (including information objects). It can be used to talk about e.g. entities are references of proper nouns: the proper noun 'Leonardo da Vinci' isAbout the Person Leonardo da Vinci; as well as to talk about sets of entities that can be described by a common noun: the common noun 'person' isAbout the set of all persons in a domain of discourse, which can be represented in DOLCE-Ultralite as an individual of the class: Collection .
			The isReferenceOf relation is irreflexive, differently from its inverse isAbout."
	endAnnotations
	
relation isReferenceOfInformationRealizedBy (ofType Entity, ofType InformationRealization) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is reference of information realized by@en"
		dc#identifier hasValue "è riferimento dell'informazione realizzata da@it"
		dc#description hasValue "The relation between entities and information realizations, e.g. between Italy and a paper copy of the text of the Italian Constitution."
	endAnnotations
	
relation isRegionFor (ofType Region, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is region for@en"
		dc#identifier hasValue "è una regione di@it"
		dc#description hasValue "A relation between entities and regions, e.g. 'the color of my car is red'."
	endAnnotations
	
relation isRelatedToConcept (ofType Concept, ofType Concept) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is related to concept@en"
		dc#identifier hasValue "è associato al concetto@it"
		dc#description hasValue "Any relation between concepts, e.g. superordinated, conceptual parthood, having a parameter, having a task, superordination, etc."
	endAnnotations
	
relation isRelatedToDescription (ofType Description, ofType Description) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is related to description@en"
		dc#identifier hasValue "è associata alla descrizione@it"
		dc#description hasValue "Any relation between descriptions."
	endAnnotations
	
relation isRoleOf (ofType Role, ofType Object) subRelationOf classifies
	annotations
		dc#identifier hasValue "is role of@en"
		dc#identifier hasValue "è un ruolo di@it"
		dc#description hasValue "A relation between an object and a role, e.g. 'student' is the role of 'John'."
	endAnnotations
	
relation isSatisfiedBy (ofType Description, ofType Situation) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is satisfied by@en"
		dc#identifier hasValue "è soddisfatta da@it"
		dc#description hasValue "A relation between a Situation and a Description, e.g. the execution of a Plan satisfies that plan."
	endAnnotations
	
relation isSettingFor (ofType Situation, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is setting for@en"
		dc#identifier hasValue "include@it"
		dc#description hasValue "A relation between situations and entities, e.g. 'this morning I've prepared my coffee with a new fantastic Arabica', i.e.: the preparation of my coffee this morning is the setting for (an amount of) a new fantastic Arabica."
	endAnnotations
	
relation isSpecializedBy (ofType SocialObject, ofType SocialObject) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "is specialized by@en"
		dc#identifier hasValue "è specializzato da@it"
		dc#description hasValue "A partial order relation that holds between social objects. It represents the subsumption relation between e.g. a Concept and another Concept that is broader in extensional interpretation, but narrowe in intensional interpretation.
			E.g. PhDStudent Role specializes Student Role."
	endAnnotations

relation overlaps (ofType Entity, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "overlaps@en"
		dc#identifier hasValue "sovrapposto a@it"
		dc#description hasValue "A schematic relation between any entities, e.g. 'the chest region overlaps with the abdomen region', 'my spoken words overlap with hers', 'the time of my leave overlaps with the time of your arrival', 'fibromyalgia overlaps with other conditions'.
			Subproperties and restrictions can be used to specialize overlaps for objects, events, time intervals, etc."
	endAnnotations	
	
relation parametrizes (ofType Parameter, ofType Region) subRelationOf classifies
	annotations
		dc#identifier hasValue "parametrizes@en"
		dc#identifier hasValue "parametrizza@it"
		dc#description hasValue "The relation between a Parameter, e.g. 'MajorAgeLimit', and a Region, e.g. '18_year'.
			For a more data-oriented relation, see hasDataValue"
	endAnnotations
	
relation precedes (ofType Entity, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "precedes@en"
		dc#identifier hasValue "precede@it"
		dc#description hasValue "A relation between entities, expressing a 'sequence' schema. 
			E.g. 'year 1999 precedes 2000', 'deciding what coffee to use' precedes 'preparing coffee', 'World War II follows World War I', 'in the Milan to Rome autoroute, Bologna precedes Florence', etc.
			It can then be used between tasks, processes, time intervals, spatially locate objects, situations, etc. 
			Subproperties can be defined in order to distinguish the different uses."
	endAnnotations	
	
relation realizes (ofType InformationRealization, ofType InformationObject) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "realizes@en"
		dc#identifier hasValue "realizza@it"
		dc#description hasValue "A relation between an information realization and an information object, e.g. the paper copy of the Italian Constitution realizes the text of the Constitution."
	endAnnotations	
	
relation realizesInformationAbout (ofType InformationRealization, ofType Entity) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "realizes information about@en"
		dc#identifier hasValue "realizza informazione che si riferisce a a@it"
		dc#description hasValue "The relation between entities and information realizations, e.g. between Italy and a paper copy of the text of the Italian Constitution."
	endAnnotations	
	
relation satisfies (ofType Situation, ofType Description) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "satisfies@en"
		dc#identifier hasValue "soddisfa@it"
		dc#description hasValue "A relation between a Situation and a Description, e.g. the execution of a Plan satisfies that plan."
	endAnnotations
	
relation specializes (ofType SocialObject, ofType SocialObject) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "specializes@en"
		dc#identifier hasValue "specializza@it"
		dc#description hasValue "A partial order relation that holds between social objects. 
			It mainly represents the subsumption relation between e.g. a Concept or Description and another Concept (resp. Description) that is broader in extensional interpretation, but narrower in intensional interpretation. For example, the role PhDStudent specializes the role Student.
			Another possible use is between a Collection that isCoveredBy a Concept A, and another Collection that isCoveredBy a Concept B that on its turm specializes A. For example, the 70,000 series Selmer Mark VI saxophone Collection specializes the Selmer Mark VI saxophone Collection."
	endAnnotations

relation unifies (ofType Description, ofType Collection) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "unifies@en"
		dc#identifier hasValue "unifica@it"
		dc#description hasValue "A Collection has a unification criterion, provided by a Description; for example, a community of practice can be unified by a shared theory or interest, e.g. the community that makes research on mirror neurons shares some core knowledge about mirror neurons, which can be represented as a Description MirrorNeuronTheory that unifies the community. There can be several unifying descriptions."
	endAnnotations
	
relation usesConcept (ofType Description, ofType Concept) subRelationOf associatedWith
	annotations
		dc#identifier hasValue "uses concept@en"
		dc#identifier hasValue "usa il concetto@it"
		dc#description hasValue "A generic relation holding between a Description and a Concept. In order to be used, a Concept must be previously definedIn another Description. This last condition cannot be encoded for object properties in OWL."
	endAnnotations
